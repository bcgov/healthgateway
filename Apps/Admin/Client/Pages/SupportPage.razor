@page "/support"
@layout MainLayout
@attribute [Authorize(Roles = $"{Roles.Admin},{Roles.Reviewer}")]
@using HealthGateway.Admin.Client.Store.MessageVerification
@using HealthGateway.Admin.Client.Store.SupportUser
@using HealthGateway.Common.Data.Constants
@using HealthGateway.Common.Data.Utils
@using HealthGateway.Common.Ui.Constants
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Health Gateway Admin Support</PageTitle>
<HgPageHeading>Support</HgPageHeading>

<HgBannerFeedback Severity="Severity.Error" IsEnabled="HasMessagingVerificationsError" TResetAction="MessageVerificationActions.ResetStateAction" DataTestId="messaging-verification-banner-feedback-error-message">
    @MessageVerificationState.Value.Error?.Message
</HgBannerFeedback>
<HgBannerFeedback Severity="Severity.Error" IsEnabled="HasSupportUsersError" TResetAction="SupportUserActions.ResetStateAction" DataTestId="user-banner-feedback-error-message">
    @SupportUserState.Value.Error?.Message
</HgBannerFeedback>

<MudForm @ref="Form">
    <MudGrid Spacing="0">
        <MudItem xs="12" sm="3">
            <HgSelect T="UserQueryType" Label="Query Type" Required="@true" @bind-Value="SelectedQueryType" data-testid="query-type-select">
                @foreach (UserQueryType queryType in QueryTypes)
                {
                    <MudSelectItem Value="@queryType" data-testid="query-type">@FormatQueryType(queryType)</MudSelectItem>
                }
            </HgSelect>
        </MudItem>
        <MudItem xs="12" sm="9">
            @if (PhnOrDependentSelected)
            {
                <HgTextField LeftMargin="Breakpoint.Sm" T="string" Label="@FormatQueryType(UserQueryType.Phn)" Required="@true" Validation="@ValidateQueryParameter" Mask="@(new PatternMask(Mask.PhnMaskTemplate))" @bind-Value="QueryParameter" data-testid="query-input" />
            }
            else
            {
                <HgTextField LeftMargin="Breakpoint.Sm" T="string" Label="@FormatQueryType(SelectedQueryType)" Required="@true" Validation="@ValidateQueryParameter" @bind-Value="QueryParameter" data-testid="query-input" />
            }
        </MudItem>
        <MudItem Class="d-flex justify-end" xs="12">
            <HgButton TopMargin="Breakpoint.Always" EndIcon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" @onclick="SearchAsync" data-testid="search-btn">Search</HgButton>
        </MudItem>
    </MudGrid>
</MudForm>

<HgBannerFeedback Severity="@Severity.Info" IsEnabled="HasSupportUsersWarning" TResetAction="SupportUserActions.ResetStateAction" DataTestId="user-banner-feedback-warning-message">
    @SupportUserState.Value.WarningMessage
</HgBannerFeedback>

@if (SupportUsersLoaded || SupportUsersLoading)
{
    <MudGrid>
        <MudItem xs="12" lg="12">
            <MudText Class="mt-3" Typo="Typo.subtitle1">
                @FormatQueryType(SelectedQueryType) Query Results
            </MudText>
            <MudTable Class="mt-3"
                      Items="SupportUserRows"
                      Loading="SupportUsersLoading"
                      AllowUnsorted="false"
                      Breakpoint="Breakpoint.Md"
                      HorizontalScrollbar="true"
                      Striped="true"
                      Dense="true"
                      data-testid="user-table">
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SupportUserRow, object>(x => x.Hdid)">
                            HDID
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SupportUserRow, object>(x => x.PersonalHealthNumber)">
                            PHN
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<SupportUserRow, object>(x => x.LastLoginDateTime ?? DateTime.MinValue)"
                                           InitialDirection="@SortDirection.Descending">
                            Last Login
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Style="text-align:right"></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="HDID" data-testid=@($"user-table-hdid-{context.Hdid}")>@context.Hdid</MudTd>
                    <MudTd DataLabel="PHN" data-testid=@($"user-table-phn-{context.Hdid}")>@context.PersonalHealthNumber</MudTd>
                    <MudTd DataLabel="Last Login" data-testid=@($"user-table-last-login-{context.Hdid}")>@DateFormatter.ToShortDateAndTime(context.LastLoginDateTime)</MudTd>
                    <MudTd Style="text-align:right">
                        <div>
                            <MudTooltip Text="@(context.IsExpanded ? "Collapse" : "Expand")">
                                <MudIconButton OnClick="@(() => ToggleExpandRow(context.Hdid))"
                                               Icon="@(context.IsExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                                               Color="@Color.Primary"
                                               data-testid=@($"messaging-verification-table-expand-btn-{context.Hdid}")>
                                </MudIconButton>
                            </MudTooltip>
                        </div>
                    </MudTd>
                </RowTemplate>
                <ChildRowContent>
                    @if (!context.IsSameAddress && SelectedQueryType is UserQueryType.Phn or UserQueryType.Hdid)
                    {
                        <div Class="mx-4 my-3">
                            <MudText Typo="Typo.subtitle1" data-testid=@($"physical-address-label-{context.Hdid}")>
                                Physical Address
                            </MudText>
                            <MudText Typo="Typo.body2" data-testid=@($"physical-address-{context.Hdid}")>
                                @if (context.IsPhysicalAddressShown)
                                {
                                    @context.PhysicalAddress
                                }
                                else
                                {
                                    @SupportUserRow.NoAddressMessage
                                }
                            </MudText>
                        </div>
                    }
                    @if (SelectedQueryType is UserQueryType.Phn or UserQueryType.Hdid)
                    {
                        <div Class="mx-4 my-3">
                            <MudText Typo="Typo.subtitle1" data-testid=@($"postal-address-label-{context.Hdid}")>
                                @context.PostalAddressLabel
                            </MudText>
                            <MudText Typo="Typo.body2" data-testid=@($"postal-address-{context.Hdid}")>
                                @if (context.IsPostalAddressShown)
                                {
                                    @context.PostalAddress
                                }
                                else
                                {
                                    @SupportUserRow.NoAddressMessage
                                }
                            </MudText>
                        </div>
                    }
                    @if (context.IsExpanded)
                    {
                        <MessageVerificationTable Data="@GetMessagingVerificationModels(context.Hdid)" IsLoading="@MessagingVerificationsLoading" />
                    }
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
}
