@page "/support"
@layout MainLayout
@attribute [Authorize(Roles = $"{Roles.Admin},{Roles.Reviewer}")]
@using HealthGateway.Admin.Client.Store.MessageVerification
@using HealthGateway.Admin.Client.Store.PatientSupport
@using HealthGateway.Common.Data.Constants
@using HealthGateway.Common.Data.Utils
@using HealthGateway.Common.Ui.Constants
@using HealthGateway.Admin.Client.Components.Support
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Health Gateway Admin Support</PageTitle>
<HgPageHeading>Support</HgPageHeading>

<HgBannerFeedback Severity="Severity.Error" IsEnabled="HasMessagingVerificationsError" TResetAction="MessageVerificationActions.ResetStateAction" DataTestId="messaging-verification-banner-feedback-error-message">
    @MessageVerificationState.Value.Error?.Message
</HgBannerFeedback>
<HgBannerFeedback Severity="Severity.Error" IsEnabled="HasPatientsError" TResetAction="PatientSupportActions.ResetStateAction" DataTestId="user-banner-feedback-error-message">
    @PatientSupportState.Value.Error?.Message
</HgBannerFeedback>

<MudForm @ref="Form">
    <MudGrid Spacing="0">
        <MudItem xs="12" sm="3">
            <HgSelect
                T="PatientQueryType"
                Label="Query Type"
                Required="@true"
                @bind-Value="SelectedQueryType"
                TopMargin="Breakpoint.None"
                data-testid="query-type-select">
                @foreach (PatientQueryType queryType in QueryTypes)
                {
                    <MudSelectItem Value="@queryType" data-testid="query-type">@FormatQueryType(queryType)</MudSelectItem>
                }
            </HgSelect>
        </MudItem>
        <MudItem xs="12" sm="9">
            <div class="d-flex align-start">
                @if (PhnOrDependentSelected)
                {
                    <HgTextField
                        T="string"
                        Label="@FormatQueryType(PatientQueryType.Phn)"
                        Required="@true"
                        Validation="@ValidateQueryParameter"
                        Mask="@(new PatternMask(Mask.PhnMaskTemplate))"
                        @bind-Value="QueryParameter"
                        TopMargin="Breakpoint.None"
                        LeftMargin="Breakpoint.Sm"
                        Class="flex-grow-1"
                        data-testid="query-input" />
                }
                else
                {
                    <HgTextField
                        T="string"
                        Label="@FormatQueryType(SelectedQueryType)"
                        Required="@true"
                        Validation="@ValidateQueryParameter"
                        @bind-Value="QueryParameter"
                        TopMargin="Breakpoint.None"
                        LeftMargin="Breakpoint.Sm"
                        Class="flex-grow-1"
                        data-testid="query-input" />
                }
                <HgButton
                    EndIcon="fas fa-magnifying-glass"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    TopMargin="Breakpoint.Always"
                    LeftMargin="Breakpoint.Always"
                    OnClick="SearchAsync"
                    data-testid="search-btn">
                    Search
                </HgButton>
            </div>
        </MudItem>
    </MudGrid>
</MudForm>

<HgBannerFeedback Severity="@Severity.Info" IsEnabled="HasPatientsWarning" TResetAction="PatientSupportActions.ResetStateAction" DataTestId="user-banner-feedback-warning-message">
    @PatientSupportState.Value.WarningMessage
</HgBannerFeedback>

@if (PatientsLoaded || PatientsLoading)
{
    <MudGrid>
        <MudItem xs="12" lg="12">
            <MudText Class="mt-3" Typo="Typo.subtitle1">
                @FormatQueryType(SelectedQueryType) Query Results
            </MudText>
            <MudTable Class="mt-3"
                      Items="PatientRows"
                      Loading="PatientsLoading"
                      AllowUnsorted="false"
                      Breakpoint="Breakpoint.Md"
                      HorizontalScrollbar="true"
                      Striped="true"
                      Dense="true"
                      data-testid="user-table">
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<PatientRow, object>(x => x.Hdid)">
                            HDID
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<PatientRow, object>(x => x.PersonalHealthNumber)">
                            PHN
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<PatientRow, object>(x => x.LastLoginDateTime ?? DateTime.MinValue)"
                                           InitialDirection="@SortDirection.Descending">
                            Last Login
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<PatientRow, object>(x => x.CreatedDateTime ?? DateTime.MinValue)"
                                           InitialDirection="@SortDirection.Descending">
                            Account Created
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Style="text-align:right"></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="HDID" data-testid=@($"user-table-hdid-{context.Hdid}")>@context.Hdid</MudTd>
                    <MudTd DataLabel="PHN" data-testid=@($"user-table-phn-{context.Hdid}")>@context.PersonalHealthNumber</MudTd>
                    <MudTd DataLabel="Last Login" data-testid=@($"user-table-last-login-{context.Hdid}")>@DateFormatter.ToShortDateAndTime(context.LastLoginDateTime)</MudTd>
                    <MudTd DataLabel="Account Created" data-testid=@($"user-table-account-created-{context.Hdid}")>@DateFormatter.ToShortDateAndTime(context.CreatedDateTime)</MudTd>
                    <MudTd Style="text-align:right">
                        <div>
                            <MudTooltip Text="@(context.IsExpanded ? "Collapse" : "Expand")">
                                <MudIconButton OnClick="@(() => ToggleExpandRow(context.Hdid))"
                                               Icon="@(context.IsExpanded ? "fas fa-chevron-up" : "fas fa-chevron-down")"
                                               Color="@Color.Primary"
                                               data-testid=@($"messaging-verification-table-expand-btn-{context.Hdid}")>
                                </MudIconButton>
                            </MudTooltip>
                        </div>
                    </MudTd>
                </RowTemplate>
                <ChildRowContent>
                    @if (!context.IsSameAddress && SelectedQueryType is PatientQueryType.Phn or PatientQueryType.Hdid)
                    {
                        <div Class="mx-4 my-3">
                            <MudText Typo="Typo.subtitle1" data-testid=@($"physical-address-label-{context.Hdid}")>
                                Physical Address
                            </MudText>
                            <MudText Typo="Typo.body2" data-testid=@($"physical-address-{context.Hdid}")>
                                @if (context.IsPhysicalAddressShown)
                                {
                                    @context.PhysicalAddress
                                }
                                else
                                {
                                    @PatientRow.NoAddressMessage
                                }
                            </MudText>
                        </div>
                    }
                    @if (SelectedQueryType is PatientQueryType.Phn or PatientQueryType.Hdid)
                    {
                        <div Class="mx-4 my-3">
                            <MudText Typo="Typo.subtitle1" data-testid=@($"postal-address-label-{context.Hdid}")>
                                @context.PostalAddressLabel
                            </MudText>
                            <MudText Typo="Typo.body2" data-testid=@($"postal-address-{context.Hdid}")>
                                @if (context.IsPostalAddressShown)
                                {
                                    @context.PostalAddress
                                }
                                else
                                {
                                    @PatientRow.NoAddressMessage
                                }
                            </MudText>
                        </div>
                    }
                    @if (context.IsExpanded)
                    {
                        <MessageVerificationTable Data="@GetMessagingVerificationModels(context.Hdid)" IsLoading="@MessagingVerificationsLoading" />
                    }
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
}
