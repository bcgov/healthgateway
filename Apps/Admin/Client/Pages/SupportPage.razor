@page "/support"
@layout MainLayout
@attribute [Authorize(Roles = $"{Roles.Admin},{Roles.Reviewer}")]
@using HealthGateway.Admin.Client.Store.PatientSupport
@using HealthGateway.Common.Data.Constants
@using HealthGateway.Common.Data.Utils
@using HealthGateway.Common.Ui.Constants
@using HealthGateway.Admin.Common.Constants
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Health Gateway Admin Support</PageTitle>
<HgPageHeading>Support</HgPageHeading>

<HgBannerFeedback
    Severity="Severity.Error"
    IsEnabled="HasPatientsError"
    TResetAction="PatientSupportActions.ResetStateAction"
    Class="mb-3"
    DataTestId="user-banner-feedback-error-message">
    @PatientSupportState.Value.Error?.Message
</HgBannerFeedback>

<MudForm @ref="Form">
    <MudGrid Spacing="0">
        <MudItem xs="12" sm="3">
            <HgSelect
                T="PatientQueryType"
                Label="Query Type"
                Required="@true"
                @bind-Value="SelectedQueryType"
                TopMargin="Breakpoint.None"
                data-testid="query-type-select">
                @foreach (PatientQueryType queryType in QueryTypes)
                {
                    <MudSelectItem Value="@queryType" data-testid="query-type">@FormatQueryType(queryType)</MudSelectItem>
                }
            </HgSelect>
        </MudItem>
        <MudItem xs="12" sm="9">
            <div class="d-flex align-start">
                @if (PhnOrDependentSelected)
                {
                    <HgTextField
                        T="string"
                        Label="@FormatQueryType(PatientQueryType.Phn)"
                        Required="@true"
                        Validation="@ValidateQueryParameter"
                        Mask="@(new PatternMask(Mask.PhnMaskTemplate))"
                        @bind-Value="QueryParameter"
                        TopMargin="Breakpoint.None"
                        LeftMargin="Breakpoint.Sm"
                        Class="flex-grow-1"
                        data-testid="query-input" />
                }
                else
                {
                    <HgTextField
                        T="string"
                        Label="@FormatQueryType(SelectedQueryType)"
                        Required="@true"
                        Validation="@ValidateQueryParameter"
                        @bind-Value="QueryParameter"
                        TopMargin="Breakpoint.None"
                        LeftMargin="Breakpoint.Sm"
                        Class="flex-grow-1"
                        data-testid="query-input" />
                }
                <HgButton
                    EndIcon="fas fa-magnifying-glass"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    TopMargin="Breakpoint.Always"
                    LeftMargin="Breakpoint.Always"
                    OnClick="SearchAsync"
                    data-testid="search-btn">
                    Search
                </HgButton>
            </div>
        </MudItem>
    </MudGrid>
</MudForm>

<HgBannerFeedback
    Severity="@Severity.Info"
    IsEnabled="HasPatientsWarning"
    TResetAction="PatientSupportActions.ResetStateAction"
    Class="mt-3"
    DataTestId="user-banner-feedback-warning-message">
    <ul>
        @foreach (string warning in PatientSupportState.Value.WarningMessages)
        {
            <li>@warning</li>
        }
    </ul>
</HgBannerFeedback>

@if (PatientsLoaded || PatientsLoading)
{
    <MudGrid>
        <MudItem xs="12" lg="12">
            <MudText Class="mt-3" Typo="Typo.subtitle1">
                @FormatQueryType(SelectedQueryType) Query Results
            </MudText>
            <MudTable Class="mt-3"
                      Items="PatientRows"
                      Loading="PatientsLoading"
                      AllowUnsorted="false"
                      Breakpoint="Breakpoint.Md"
                      HorizontalScrollbar="true"
                      Striped="true"
                      Dense="true"
                      data-testid="user-table">
                <ColGroup>
                    <MudHidden Breakpoint="@Breakpoint.MdAndDown">
                        <col />
                        <col style="min-width: 125px;" />
                        <col style="min-width: 125px;" />
                        <col style="min-width: 550px;" />
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<PatientRow, object>(x => x.SortName)" InitialDirection="@SortDirection.Ascending">
                            Name
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<PatientRow, object>(x => x.Birthdate ?? DateOnly.MinValue)">
                            DOB
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<PatientRow, object>(x => x.PersonalHealthNumber)">
                            PHN
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<PatientRow, object>(x => x.Hdid)">
                            HDID
                        </MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name" data-testid=@($"user-table-name-{context.Hdid}")>
                        @if (context.Status != PatientStatus.Default)
                        {
                            <MudIcon Icon="fas fa-triangle-exclamation" Size="Size.Small" Class="mr-2" data-testid="warning-icon" />
                        }
                        @context.Name
                    </MudTd>
                    <MudTd DataLabel="Date of Birth" data-testid=@($"user-table-dob-{context.Hdid}")>
                        @if (context.Birthdate != null)
                        {
                            @DateFormatter.ToShortDate(context.Birthdate.Value)
                        }
                    </MudTd>
                    <MudTd DataLabel="PHN" data-testid=@($"user-table-phn-{context.Hdid}")>@context.PersonalHealthNumber</MudTd>
                    <MudTd DataLabel="HDID" data-testid=@($"user-table-hdid-{context.Hdid}")>@context.Hdid</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
}
