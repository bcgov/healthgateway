@page "/claims"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using System.Security.Claims
@using Fluxor
@using HealthGateway.Admin.Client.Services
@using HealthGateway.Admin.Client.Store.Configuration
@using HealthGateway.Admin.Common.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Refit
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccessTokenProvider TokenProvider
@inject ICsvExportApi exportApi;
@inject IState<State> configState;
@inject StateFacade configFacade;
@inject IJSRuntime jsRuntime

<PageTitle>User Info</PageTitle>
<MudHidden Invert="@(!configState.Value.IsLoading)"> 
    <MudProgressLinear Color="Color.Primary" Indeterminate="@(configState.Value.IsLoading)" Class="my-7" />
</MudHidden>
<MudContainer>
    <h1>User Info</h1>

    <p>Auth Message: @_authMessage</p>

    <p>Token: @_token</p>
    @if (_claims.Count() > 0)
    {
        <ul>
            @foreach (var claim in _claims)
            {
                <li>@claim.Type: @claim.Value</li>
            }
        </ul>
    }

    <p>@_surnameMessage</p>

    <p>IP Address: @(configState.Value.Configuration?.WebClient.ClientIP ?? configState.Value.ErrorMessage)</p>
</MudContainer>
@code {


    private string? _authMessage;
    private string? _surnameMessage;
    private string? _token;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData().ConfigureAwait(true);
        configFacade.LoadConfiguration();
        this.CreateCookie("HGAdmin", "dark mode", 365);
    }

    private async void CreateCookie(string name, string value, int days)
    {
        string expires;
        if (days > 0) {
            DateTime date = DateTime.Now.AddDays(days);
            expires = "; expires=" + date.ToString("r");
        }
        else {
            expires = "";
        }
        string cookieValue = $"{name}={value}{expires}; path=/";
        await jsRuntime.InvokeVoidAsync("eval", $@"document.cookie = ""{cookieValue}""");
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync().ConfigureAwait(true);
        ClaimsPrincipal user = authState.User;

        if (user.Identity!=null && user.Identity.IsAuthenticated)
        {         
            var tokenResult = await TokenProvider.RequestAccessToken().ConfigureAwait(true);
            tokenResult.TryGetToken(out var accessToken);
            _token = accessToken.Value;

            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage = 
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
}
