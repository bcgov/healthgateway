@page "/dashboard"
@layout MainLayout
@attribute [Authorize(Roles = $"{Roles.Admin},{Roles.Reviewer},{Roles.Analyst}")]
@using HealthGateway.Admin.Client.Components.Dashboard
@using HealthGateway.Admin.Client.Store.Dashboard
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Health Gateway Admin Dashboard</PageTitle>
<HgPageHeading>Dashboard</HgPageHeading>

<HgBannerFeedback Severity="Severity.Error" IsEnabled="@ErrorMessages.Any()" TResetAction="DashboardActions.ResetStateAction">
    @foreach (string error in ErrorMessages)
    {
        <li>@error</li>
    }
</HgBannerFeedback>

<MudText Class="mt-12" Typo="@Typo.h6">All-Time Counts</MudText>
<MudGrid Class="mt-6">
    <MudItem xs="12" lg="4">
        <MudPaper Class="my-2 pa-4" Outlined="true">
            @if (AllTimeCountsLoading)
            {
                <MudSkeleton />
                <MudSkeleton data-testid="skeleton-registered-users" />
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1">
                    Registered Users
                </MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" data-testid="total-registered-users">
                    @FormatNumber(AllTimeCounts.RegisteredUsers)
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="4">
        <MudPaper Class="my-2 pa-4" Outlined="true">
            @if (AllTimeCountsLoading)
            {
                <MudSkeleton />
                <MudSkeleton data-testid="skeleton-dependents" />
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1">
                    Dependents
                </MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" data-testid="total-dependents">
                    @FormatNumber(AllTimeCounts.Dependents)
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="4">
        <MudPaper Class="my-2 pa-4" Outlined="true">
            @if (AllTimeCountsLoading)
            {
                <MudSkeleton />
                <MudSkeleton data-testid="skeleton-closed-accounts" />
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1">
                    Closed Accounts
                </MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" data-testid="total-closed-accounts">
                    @FormatNumber(AllTimeCounts.ClosedAccounts)
                </MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<MudText Class="mt-12" Typo="@Typo.h6">Platform & Demographics</MudText>
<MudGrid Class="mt-6">
    <MudItem xs="12" sm="6" md="5" lg="4">
        @if (AppLoginCountsLoading)
        {
            <MudSkeleton data-testid="skeleton-selected-date-range" SkeletonType="SkeletonType.Rectangle" Height="48px" />
        }
        else
        {
            <MudDateRangePicker MinDate="@MinimumDateTime" MaxDate="@MaximumDateTime" @ref="DemographicsDateRangePicker" Label="Select Date Range" @bind-DateRange="DemographicsDateRange" Color="Color.Success" Style="font-weight:bold">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => DemographicsDateRangePicker.Clear())">Clear</MudButton>
                    <MudButton OnClick="@(() => DemographicsDateRangePicker.Close(false))">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() => DemographicsDateRangePicker.Close())">Ok</MudButton>
                </PickerActions>
            </MudDateRangePicker>
        }
    </MudItem>
</MudGrid>
<MudGrid Class="mt-6">
    <MudItem xs="12" lg="4">
        <MudPaper Class="my-2 pa-4" Outlined="true">
            @if (AppLoginCountsLoading)
            {
                <MudSkeleton />
                <MudSkeleton data-testid="skeleton-mobile-count" />
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1">
                    Mobile App Logins
                </MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" data-testid="total-mobile-users">
                    @FormatNumber(AppLoginCounts.Mobile)
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="4">
        <MudPaper Class="my-2 pa-4" Outlined="true">
            @if (AppLoginCountsLoading)
            {
                <MudSkeleton />
                <MudSkeleton data-testid="skeleton-web-count" />
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1">
                    Web Logins
                </MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" data-testid="total-web-users">
                    @FormatNumber(AppLoginCounts.Web)
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="4">
        <MudPaper Class="my-2 pa-4" Outlined="true">
            @if (AppLoginCountsLoading)
            {
                <MudSkeleton />
                <MudSkeleton data-testid="skeleton-salesforce-count" />
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1">
                    Salesforce Logins
                </MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" data-testid="total-salesforce-users">
                    @FormatNumber(AppLoginCounts.Salesforce)
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="6">
        @if (AgeCountsLoading)
        {
            <MudSkeleton data-testid="skeleton-age-chart" SkeletonType="SkeletonType.Rectangle" Width="100%" Height="325px" />
        }
        else if (AgeCountsErrorMessage.Length == 0)
        {
            @if (AgeCounts.Any())
            {
                <MudChart
                    data-testid="age-chart"
                    ChartType="ChartType.Bar"
                    ChartSeries="[GetAgeCountSeries()]"
                    XAxisLabels="@GetAgeLabels()"
                    Width="100%"
                    Height="295" />
            }
            else
            {
                <MudText Typo="Typo.body2">No results within selected time frame.</MudText>
            }
        }
    </MudItem>
    <MudItem xs="12" lg="6" Class="d-flex flex-column justify-center">
        @if (RatingsSummaryLoading)
        {
            <MudGrid>
                <MudItem xs="4" lg="2">
                    <MudSkeleton Width="100%" />
                </MudItem>
                <MudItem xs="8" lg="10">
                    <MudSkeleton data-testid="skeleton-rating-summary" SkeletonType="SkeletonType.Rectangle" Width="100%" Height="200px" />
                </MudItem>
            </MudGrid>
        }
        else
        {
            <RatingSummary />
        }
    </MudItem>
</MudGrid>

<MudText Class="mt-12" Typo="@Typo.h6">Usage</MudText>
<MudGrid Class="mt-6">
    <MudItem xs="12" sm="6" md="5" lg="4">
        @if (RecurringUserCountLoading)
        {
            <MudSkeleton data-testid="skeleton-usage-date-range" SkeletonType="SkeletonType.Rectangle" Height="48px" />
        }
        else
        {
            <MudDateRangePicker MinDate="@MinimumDateTime" MaxDate="@MaximumDateTime" @ref="UsageDateRangePicker" Label="Select Date Range" @bind-DateRange="UsageDateRange" Color="Color.Success" Style="font-weight:bold">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => UsageDateRangePicker.Clear())">Clear</MudButton>
                    <MudButton OnClick="@(() => UsageDateRangePicker.Close(false))">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() => UsageDateRangePicker.Close())">Ok</MudButton>
                </PickerActions>
            </MudDateRangePicker>
        }
    </MudItem>
    <MudItem xs="12" sm="6" md="5" lg="4">
        @if (RecurringUserCountLoading)
        {
            <MudSkeleton data-testid="skeleton-unique-days" SkeletonType="SkeletonType.Rectangle" Height="48px" />
        }
        else
        {
            <MudNumericField data-testid="unique-days-input" T="int" Label="Unique Days" @bind-Value="UniqueDays" Required="@true" />
        }
    </MudItem>
</MudGrid>
<MudGrid Class="mt-6">
    <MudItem xs="12" lg="4">
        <MudPaper Class="my-2 pa-4" Outlined="true">
            @if (RecurringUserCountLoading)
            {
                <MudSkeleton />
                <MudSkeleton data-testid="skeleton-user-count" />
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1">
                    Recurring Users
                </MudText>
                <MudText Align="Align.Center" Typo="Typo.subtitle1" data-testid="recurring-user-count">
                    @FormatNumber(RecurringUserCount)
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudTable Class="mt-3"
                  Loading="@DailyUsageCountsLoading"
                  Items="@TableData"
                  AllowUnsorted="false"
                  HorizontalScrollbar="true"
                  Striped="true"
                  Dense="true"
                  RowsPerPage="25"
                  data-testid="daily-data-table">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DailyDataRow, object>(x => x.Date)"
                                       InitialDirection="@SortDirection.Descending">
                        Date
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DailyDataRow, object>(x => x.UserRegistrations)">
                        Registered
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DailyDataRow, object>(x => x.UserLogins)">
                        Logged In
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DailyDataRow, object>(x => x.DependentRegistrations)">
                        Dependents
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd data-testid="daily-data-date" DataLabel="Date">@context.Date.ToString("yyyy-MM-dd")</MudTd>
                <MudTd data-testid="daily-data-total-registered-users" DataLabel="Registered">@FormatNumber(context.UserRegistrations)</MudTd>
                <MudTd data-testid="daily-data-total-logged-in-users" DataLabel="Logged In">@FormatNumber(context.UserLogins)</MudTd>
                <MudTd data-testid="daily-data-dependents" DataLabel="Dependents">@FormatNumber(context.DependentRegistrations)</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="[10, 25, 50, 100, 200]" />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>
