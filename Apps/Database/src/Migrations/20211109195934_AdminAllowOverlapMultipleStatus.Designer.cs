// -------------------------------------------------------------------------
//  Copyright Â© 2019 Province of British Columbia
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// -------------------------------------------------------------------------
#pragma warning disable CS1591
// <auto-generated />
using System;
using System.Text.Json;
using HealthGateway.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HealthGateway.Database.Migrations
{
    [DbContext(typeof(GatewayDbContext))]
    [Migration("20211109195934_AdminAllowOverlapMultipleStatus")]
    partial class AdminAllowOverlapMultipleStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gateway")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("gateway.trace_seq")
                .HasMin(1L)
                .HasMax(999999L)
                .IsCyclic();

            modelBuilder.Entity("HealthGateway.Database.Models.ActiveIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ActiveIngredientId");

                    b.Property<int>("ActiveIngredientCode")
                        .HasColumnType("integer");

                    b.Property<string>("Base")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DosageUnit")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("DosageUnitFrench")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("DosageValue")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Ingredient")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.Property<string>("IngredientFrench")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("IngredientSuppliedInd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Strength")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StrengthType")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("StrengthTypeFrench")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("StrengthUnit")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("StrengthUnitFrench")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("ActiveIngredient");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.AdminTag", b =>
                {
                    b.Property<Guid>("AdminTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("AdminTagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AdminTag");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ApplicationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ApplicationSettingsId");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Application", "Component", "Key")
                        .IsUnique();

                    b.ToTable("ApplicationSetting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f279ba2-8e7b-4b1d-8c69-467d94dcb7fb"),
                            Application = "JOBS",
                            Component = "NotifyUpdatedLegalAgreementsJob",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ToS-Last-Checked",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "05/01/2019",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.AuditEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("AuditEventId");

                    b.Property<string>("ApplicationSubject")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ApplicationType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("AuditEventDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ClientIP")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Trace")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long?>("TransactionDuration")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TransactionResultCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TransactionVersion")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationType");

                    b.HasIndex("TransactionResultCode");

                    b.ToTable("AuditEvent");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.AuditTransactionResultCode", b =>
                {
                    b.Property<string>("ResultCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("ResultCode");

                    b.ToTable("AuditTransactionResultCode");

                    b.HasData(
                        new
                        {
                            ResultCode = "Ok",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Success",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ResultCode = "Fail",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Failure",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ResultCode = "NotAuth",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unauthorized",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ResultCode = "Err",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "System Error",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("CommentId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EntryTypeCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("ParentEntryId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Text")
                        .HasMaxLength(1344)
                        .HasColumnType("character varying(1344)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("EntryTypeCode");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.CommentEntryTypeCode", b =>
                {
                    b.Property<string>("CommentEntryCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("CommentEntryCode");

                    b.ToTable("CommentEntryTypeCode");

                    b.HasData(
                        new
                        {
                            CommentEntryCode = "NA",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comment for an Unknown type Entry",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            CommentEntryCode = "Med",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comment for a Medication Entry",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            CommentEntryCode = "Imm",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comment for an Immunization Entry",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            CommentEntryCode = "Lab",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comment for a Laboratory Entry",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            CommentEntryCode = "Enc",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comment for an Encounter Entry",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Communication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("CommunicationId");

                    b.Property<string>("CommunicationStatusCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CommunicationTypeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EffectiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiryDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationStatusCode");

                    b.HasIndex("CommunicationTypeCode");

                    b.ToTable("Communication");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.CommunicationEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("CommunicationEmailId");

                    b.Property<Guid>("CommunicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserProfileHdId")
                        .IsRequired()
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationId");

                    b.HasIndex("EmailId");

                    b.HasIndex("UserProfileHdId");

                    b.ToTable("CommunicationEmail");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.CommunicationStatusCode", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("StatusCode");

                    b.ToTable("CommunicationStatusCode");

                    b.HasData(
                        new
                        {
                            StatusCode = "New",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A newly created Communication",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Pending",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A Communication pending batch pickup",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Processing",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Communication is being processed",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Processed",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A Communication which has been sent",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Error",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A Communication that will not be sent",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Draft",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A draft Communication which has not been published",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.CommunicationTypeCode", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("StatusCode");

                    b.ToTable("CommunicationTypeCode");

                    b.HasData(
                        new
                        {
                            StatusCode = "Banner",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Banner communication type",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Email",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Email communication type",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "InApp",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "In-App communication type",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("CompanyId");

                    b.Property<string>("AddressBillingFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("AddressMailingFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("AddressNotificationFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("AddressOther")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("CityName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("CompanyCode")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("CompanyType")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Country")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("CountryFrench")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ManufacturerCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("PostOfficeBox")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Province")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ProvinceFrench")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StreetName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("SuiteNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("Company");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.DrugProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("DrugProductId");

                    b.Property<string>("AccessionNumber")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("AiGroupNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("BrandNameFrench")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descriptor")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DescriptorFrench")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DrugClass")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("DrugClassFrench")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("DrugCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("DrugIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(29)
                        .HasColumnType("character varying(29)");

                    b.Property<Guid>("FileDownloadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NumberOfAis")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PediatricFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("ProductCategorization")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("FileDownloadId");

                    b.ToTable("DrugProduct");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("EmailId");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailStatusCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("FormatCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<DateTime?>("LastRetryDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SentDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SmtpStatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("EmailStatusCode");

                    b.HasIndex("FormatCode");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.EmailFormatCode", b =>
                {
                    b.Property<string>("FormatCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("FormatCode");

                    b.ToTable("EmailFormatCode");

                    b.HasData(
                        new
                        {
                            FormatCode = "Text",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            FormatCode = "HTML",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.EmailStatusCode", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("StatusCode");

                    b.ToTable("EmailStatusCode");

                    b.HasData(
                        new
                        {
                            StatusCode = "New",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A newly created email",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Pending",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An email pending batch pickup",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Processed",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An email that has been sent",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Error",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An Email that will not be sent",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("EmailTemplateId");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FormatCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("FormatCode");

                    b.ToTable("EmailTemplate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("040c2ec3-d6c0-4199-9e4b-ebe6da48d52a"),
                            Body = "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Email Validation</title>\n    </head>\n    <body style=\"margin: 0\">\n        <table\n            style=\"\n                width: 100%;\n                border-spacing: 0px;\n                margin: 0;\n                color: #707070;\n                font-family: Helvetica, Arial, Verdana, Tahoma, sans-serif;\n                font-size: 12px;\n            \"\n            aria-describedby=\"Layout Table\"\n        >\n            <tr style=\"background: #003366\">\n                <th scope=\"col\" style=\"width:45px;\"></th>\n                <th\n                    scope=\"col\"\n                    style=\"text-align: left; width:350px;\"\n                >\n                    <div role=\"img\" aria - label=\"Health Gateway Logo\">\n                        <img\n                            src=\"${ActivationHost}/Logo.png\"\n                            alt=\"Health Gateway Logo\"\n                        />\n                    </div>\n                </th>\n                <th scope=\"col\"></th>\n            </tr>\n            <tr>\n                <td colspan=\"3\" style=\"height:20px;\"></td>\n            </tr>\n            <tr>\n                <td></td>\n                <td>\n                    <h1 style=\"font-size: 18px\">Almost there!</h1>\n                    <p>\n                        We've received a request to register your email address\n                        for a Health Gateway account.\n                    </p>\n                    <p>\n                        To activate your account, please verify your email by\n                        clicking the link:\n                    </p>\n                    <a\n                        style=\"color: #1292c5; font-weight: 600\"\n                        href=\"${ActivationHost}/ValidateEmail/${InviteKey}\"\n                    >\n                        Health Gateway Account Verification\n                    </a>\n                    <p>\n                        This email verification link will expire in\n                        ${ExpiryHours} hours.\n                    </p>\n                </td>\n                <td></td>\n            </tr>\n        </table>\n    </body>\n</html>\n",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "Registration",
                            Priority = 10,
                            Subject = "Health Gateway Email Verification ${Environment}",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("eb695050-e2fb-4933-8815-3d4656e4541d"),
                            Body = "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Updated Terms of Service</title>\n    </head>\n    <body style=\"margin: 0\">\n        <table\n            style=\"\n                width: 100%;\n                border-spacing: 0px;\n                margin: 0;\n                color: #707070;\n                font-family: Helvetica, Arial, Verdana, Tahoma, sans-serif;\n                font-size: 12px;\n            \"\n            aria-describedby=\"Layout Table\"\n        >\n            <tr style=\"background: #036\">\n                <th scope=\"col\" style=\"width:45px;\"></th>\n                <th\n                    scope=\"col\"\n                    style=\"text-align: left; width:350px;\"\n                >\n                    <div role=\"img\" aria-label=\"Health Gateway Logo\">\n                        <img src=\"${host}/Logo.png\" alt=\"Health Gateway Logo\" />\n                    </div>\n                </th>\n                <th scope=\"col\"></th>\n            </tr>\n            <tr>\n                <td colspan=\"3\" style=\"height:20px;\"></td>\n            </tr>\n            <tr>\n                <td></td>\n                <td>\n                    <h1 style=\"font-size: 18px\">Hi,</h1>\n                    <p>\n                        You are receiving this email as a user of the Health\n                        Gateway. We have updated our Terms of Service, effective\n                        ${effectivedate}.\n                    </p>\n                    <p>\n                        For more information, we encourage you to review the\n                        full <a href=\"${host}/${path}\">Terms of Service</a> and\n                        check out the\n                        <a href=\"${host}/release-notes\">release notes</a> for a\n                        summary of new features.\n                    </p>\n                    <p>\n                        If you have any questions or wish to provide any\n                        feedback, please contact\n                        <a href=\"mailto:${contactemail}\">${contactemail}</a>.\n                    </p>\n                    <p>Regards,</p>\n                    <p>Health Gateway Team</p>\n                </td>\n                <td></td>\n            </tr>\n        </table>\n    </body>\n</html>\n",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "TermsOfService",
                            Priority = 1,
                            Subject = "Health Gateway Updated Terms of Service ",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("79503a38-c14a-4992-b2fe-5586629f552e"),
                            Body = "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Account Closed</title>\n    </head>\n    <body style=\"margin: 0\">\n        <table\n            style=\"\n                width: 100%;\n                border-spacing: 0px;\n                margin: 0;\n                color: #707070;\n                font-family: Helvetica, Arial, Verdana, Tahoma, sans-serif;\n                font-size: 12px;\n            \"\n            aria-describedby=\"Layout Table\"\n        >\n            <tr style=\"background: #036\">\n                <th scope=\"col\" style=\"width:45px;\"></th>\n                <th\n                    scope=\"col\"\n                    style=\"text-align: left; width:350px;\"\n                >\n                    <div role=\"img\" aria-label=\"Health Gateway Logo\">\n                        <img src=\"${host}/Logo.png\" alt=\"Health Gateway Logo\" />\n                    </div>\n                </th>\n                <th scope=\"col\"></th>\n            </tr>\n            <tr>\n                <td colspan=\"3\" style=\"height:20px;\"></td>\n            </tr>\n            <tr>\n                <td></td>\n                <td>\n                    <h1 style=\"font-size: 18px\">Hi,</h1>\n                    <p>\n                        You have closed your Health Gateway account. If you\n                        would like to recover your account, please login to\n                        Health Gateway within the next 30 days and click\n                        âRecover Accountâ. No further action is required if you\n                        want your account and personally entered information to\n                        be removed from the Health Gateway after this time\n                        period.\n                    </p>\n                    <p>Thanks,</p>\n                    <p>Health Gateway Team</p>\n                </td>\n                <td></td>\n            </tr>\n        </table>\n    </body>\n</html>\n",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "AccountClosed",
                            Priority = 1,
                            Subject = "Health Gateway Account Closed ",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("2fe8c825-d4de-4884-be6a-01a97b466425"),
                            Body = "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Account Recovered</title>\n    </head>\n    <body style=\"margin: 0\">\n        <table\n            style=\"\n                width: 100%;\n                border-spacing: 0px;\n                margin: 0;\n                color: #707070;\n                font-family: Helvetica, Arial, Verdana, Tahoma, sans-serif;\n                font-size: 12px;\n            \"\n            aria-describedby=\"Layout Table\"\n        >\n            <tr style=\"background: #036\">\n                <th scope=\"col\" style=\"width:45px;\"></th>\n                <th\n                    scope=\"col\"\n                    style=\"text-align: left; width:350px;\"\n                >\n                    <div role=\"img\" aria-label=\"Health Gateway Logo\">\n                        <img src=\"${host}/Logo.png\" alt=\"Health Gateway Logo\" />\n                    </div>\n                </th>\n                <th scope=\"col\"></th>\n            </tr>\n            <tr>\n                <td colspan=\"3\" style=\"height:20px;\"></td>\n            </tr>\n            <tr>\n                <td></td>\n                <td>\n                    <h1 style=\"font-size: 18px\">Hi,</h1>\n                    <p>\n                        You have successfully recovered your Health Gateway\n                        account. You may continue to use the service as you did\n                        before.\n                    </p>\n                    <p>Thanks,</p>\n                    <p>Health Gateway Team</p>\n                </td>\n                <td></td>\n            </tr>\n        </table>\n    </body>\n</html>\n",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "AccountRecovered",
                            Priority = 1,
                            Subject = "Health Gateway Account Recovered",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("d9898318-4e53-4074-9979-5d24bd370055"),
                            Body = "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Account Removed</title>\n    </head>\n    <body style=\"margin: 0\">\n        <table\n            style=\"\n                width: 100%;\n                border-spacing: 0px;\n                margin: 0;\n                color: #707070;\n                font-family: Helvetica, Arial, Verdana, Tahoma, sans-serif;\n                font-size: 12px;\n            \"\n            aria-describedby=\"Layout Table\"\n        >\n            <tr style=\"background: #036\">\n                <th scope=\"col\" style=\"width:45px;\"></th>\n                <th\n                    scope=\"col\"\n                    style=\"text-align: left; width:350px;\"\n                >\n                    <div role=\"img\" aria-label=\"Health Gateway Logo\">\n                        <img src=\"${host}/Logo.png\" alt=\"Health Gateway Logo\" />\n                    </div>\n                </th>\n                <th scope=\"col\"></th>\n            </tr>\n            <tr>\n                <td colspan=\"3\" style=\"height:20px;\"></td>\n            </tr>\n            <tr>\n                <td></td>\n                <td>\n                    <h1 style=\"font-size: 18px\">Hi,</h1>\n                    <p>\n                        Your Health Gateway account closure has been completed.\n                        Your account and personally entered information have\n                        been removed from the application. You are welcome to\n                        register again for the Health Gateway in the future.\n                    </p>\n                    <p>Thanks,</p>\n                    <p>Health Gateway Team</p>\n                </td>\n                <td></td>\n            </tr>\n        </table>\n    </body>\n</html>\n",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "AccountRemoved",
                            Priority = 1,
                            Subject = "Health Gateway Account Closure Complete",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("75c79b3e-1a61-403b-82ee-fddcda7144af"),
                            Body = "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Health Gateway Feedback</title>\n    </head>\n    <body style=\"margin: 0\">\n        <strong>Hi Health Gateway Team,</strong>\n        <p>Feedback/Question received: </p>\n        <p>${feedback}</p>\n    </body>\n</html>\n",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "AdminFeedback",
                            Priority = 1,
                            Subject = "Health Gateway Feedback Received",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.EventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("EventLogId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EventSource")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.FileDownload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FileDownloadId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("character varying(44)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("ProgramCode")
                        .IsUnique();

                    b.ToTable("FileDownload");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FormId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("PharmaceuticalForm")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("PharmaceuticalFormCode")
                        .HasColumnType("integer");

                    b.Property<string>("PharmaceuticalFormFrench")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("Form");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.GenericCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("GenericCacheId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("ExpiryDateTime")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HdId")
                        .IsRequired()
                        .HasMaxLength(54)
                        .HasColumnType("character varying(54)");

                    b.Property<JsonDocument>("JSON")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("JSONType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("HdId", "Domain")
                        .IsUnique();

                    b.ToTable("GenericCache");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.LegalAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("LegalAgreementsId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EffectiveDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalAgreementCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LegalText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("LegalAgreementCode");

                    b.ToTable("LegalAgreement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5acf1de-2f5f-431e-955d-a837d5854182"),
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LegalAgreementCode = "ToS",
                            LegalText = "<p><strong>HealthGateway Terms of Service</strong></p>\n<p>\n    Use of this service is governed by the following terms and conditions.\n    Please read these terms and conditions carefully, as by using this website\n    you will be deemed to have agreed to them. If you do not agree with these\n    terms and conditions, do not use this service.\n</p>\n<p>\n    The Health Gateway provides BC residents with access to their health\n    information empowering patients and their families to manage their health\n    care. In accessing your health information through this service, you\n    acknowledge that the information within does not represent a comprehensive\n    record of your health care in BC. No personal health information will be\n    stored within the Health Gateway application. Each time you login, your\n    health information will be fetched from information systems within BC and\n    purged upon logout. If you choose to share your health information accessed\n    through the website with a family member or caregiver, you are responsible\n    for all the actions they take with respect to the use of your information.\n</p>\n<p>\n    This service is not intended to provide you with medical advice nor replace\n    the care provided by qualified health care professionals. If you have\n    questions or concerns about your health, please contact your care provider.\n</p>\n<p>\n    The personal information you provide (Name and Email) will be used for the\n    purpose of connecting your Health Gateway account to your BC Services Card\n    account under the authority of section 33(a) of the Freedom of Information\n    and Protection of Privacy Act. This will be done through the BC Services\n    Identity Assurance Service. Once your identity is verified using your BC\n    Services Card, you will be able to view your health records from various\n    health information systems in one place. Health Gatewayâs collection of your\n    personal information is under the authority of section 26(c) of the Freedom\n    of Information and Protection of Privacy Act.\n</p>\n<p>\n    If you have any questions about our collection or use of personal\n    information, please direct your inquiries to the Health Gateway team:\n</p>\n<p>\n    <em>\n        <div>Nino Samson</div>\n        <div>Product Owner, Health Gateway</div>\n        <div>Telephone: 778-974-2712</div>\n        <div>Email: nino.samson@gov.bc.ca</div>\n    </em>\n</p>\n\n<p><strong>Limitation of Liabilities</strong></p>\n<p>\n    Under no circumstances will the Government of British Columbia be liable to\n    any person or business entity for any direct, indirect, special, incidental,\n    consequential, or other damages based on any use of this website or any\n    other website to which this site is linked, including, without limitation,\n    any lost profits, business interruption, or loss of programs or information,\n    even if the Government of British Columbia has been specifically advised of\n    the possibility of such damages.\n</p>\n",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("ec438d12-f8e2-4719-8444-28e35d34674c"),
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LegalAgreementCode = "ToS",
                            LegalText = "<p><strong>HealthGateway Terms of Service</strong></p>\n<p>\n    Use of the Health Gateway service (the âServiceâ) is governed by the\n    following terms and conditions. Please read these terms and conditions\n    carefully, as by using the Service you will be deemed to have agreed to\n    them. If you do not agree with these terms and conditions, please do not use\n    the Service.\n</p>\n<p><strong>1. The Health Gateway Service</strong></p>\n<p>\n    The Service provides residents of British Columbia with access to their\n    health information (<strong>\"Health Information\"</strong>). It allows users\n    to, in one place, view their Health Information from various Provincial\n    health information systems, empowering patients and their families to manage\n    their health care.\n</p>\n<p><strong>2. Your use of the Service </strong></p>\n<p>You may only access your own Health Information using the Service.</p>\n<p>\n    If you choose to share the Health Information accessed through this Service\n    with others (e.g. with a family member or caregiver), you are responsible\n    for all the actions they take with respect to the use of your Health\n    Information.\n</p>\n<p>\n    You must follow any additional terms and conditions made available to you in\n    relation to the Service.\n</p>\n<p>\n    Do not misuse the Service, for example by trying to access or use it using a\n    method other than the interface and instructions we provide. You may use the\n    Service only as permitted by law. We may suspend or stop providing the\n    Service to you if you do not comply with these terms and conditions, or if\n    we are investigating a suspected misuse of the Service.\n</p>\n<p>\n    Using the Service does not give you ownership of any intellectual property\n    rights in the Service or the content you access. Donât remove, obscure, or\n    alter any legal notices displayed in connection with the Service.\n</p>\n<p>\n    We may stop providing the Service to you, or may add or create new limits on\n    the Service, for any reason and at any time.\n</p>\n<p>\n    <strong\n        >3. Service is not a comprehensive health record or medical\n        advice</strong\n    >\n</p>\n<p>\n    The Health Information accessed through this Service is not a comprehensive\n    record of your health care in BC.\n</p>\n<p>\n    This Service is not intended to provide you with medical advice or replace\n    the care provided by qualified health care professionals. If you have\n    questions or concerns about your health, please contact your care provider.\n</p>\n<p><strong>4. Privacy Notice</strong></p>\n<p>\n    The personal information you provide the Service (Name and Email) will be\n    used for the purpose of connecting your Health Gateway account to your BC\n    Services Card account under the authority of section 26(c) of the Freedom of\n    Information and Protection of Privacy Act. Once your BC Services Card is\n    verified by the Service, you will be able to view your Health Information\n    using the Service. The Serviceâs collection of your personal information is\n    under the authority of section 26(c) of the Freedom of Information and\n    Protection of Privacy Act.\n</p>\n<p>\n    The Serviceâs notes feature allows you to enter your own notes to provide\n    more information related to your health care. Use of this feature is\n    entirely voluntary. Any notes will be stored in the Health Gateway in\n    perpetuity, or until you choose to delete your account or remove specific\n    notes. Any notes that you create can only be accessed by you securely using\n    your BC Services Card.\n</p>\n<p>\n    If you have any questions about our collection or use of personal\n    information, please direct your inquiries to the Health Gateway team:\n</p>\n<p>\n    <em>\n        <div>Nino Samson</div>\n        <div>Product Owner, Health Gateway</div>\n        <div>Telephone: <a href=\"tel:778-974-2712\">778-974-2712</a></div>\n        <div>\n            Email:\n            <a href=\"mailto:nino.samson@gov.bc.ca\">nino.samson@gov.bc.ca</a>\n        </div>\n    </em>\n</p>\n<p><strong>5. Warranty Disclaimer</strong></p>\n<p>\n    The Service and all of the information it contains are provided \" as is\"\n    without warranty of any kind, whether express or implied. All implied\n    warranties, including, without limitation, implied warranties of\n    merchantability, fitness for a particular purpose, and non-infringement, are\n    hereby expressly disclaimed.\n</p>\n<p><strong>6. Limitation of Liabilities</strong></p>\n<p>\n    Under no circumstances will the Government of British Columbia be liable to\n    any person or business entity for any direct, indirect, special, incidental,\n    consequential, or other damages based on any use of the Service or any\n    website or system to which this Service may be linked, including, without\n    limitation, any lost profits, business interruption, or loss of programs or\n    information, even if the Government of British Columbia has been\n    specifically advised of the possibility of such damages.\n</p>\n<p><strong>7. About these Terms and Conditions</strong></p>\n<p>\n    We may modify these terms and conditions, or any additional terms and\n    conditions that apply to the Service, at any time, for example to reflect\n    changes to the law or changes to the Service. You should review these terms\n    and conditions regularly. Changes to these terms and conditions will be\n    effective immediately after they are posted. If you do not agree to any\n    changes to these terms, you should discontinue your use of the Service\n    immediately. If there is any conflict between these terms and conditions and\n    any additional terms and conditions, the additional terms and conditions\n    will prevail. These terms and conditions are governed by and to be construed\n    in accordance with the laws of British Columbia and the federal laws of\n    Canada applicable therein.\n</p>\n",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("1d94c170-5118-4aa6-ba31-e3e07274ccbd"),
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2020, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2020, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LegalAgreementCode = "ToS",
                            LegalText = "<p><strong>HealthGateway Terms of Service</strong></p>\n<p>\n    Use of the Health Gateway service (the <strong>\"Service\"</strong>) is\n    governed by the following terms and conditions. Please read these terms and\n    conditions carefully, as by using the Service you will be deemed to have\n    agreed to them. If you do not agree with these terms and conditions, please\n    do not use the Service.\n</p>\n<p><strong>1. The Health Gateway Service</strong></p>\n<p>\n    The Service provides residents of British Columbia with access to their\n    health information (<strong>\"Health Information\"</strong>). It allows users\n    to, in one place, view their Health Information from various Provincial\n    health information systems, empowering patients and their families to manage\n    their health care.\n</p>\n<p><strong>2. Your use of the Service</strong></p>\n<p>You may only access your own Health Information using the Service.</p>\n<p>\n    If you choose to share the Health Information accessed through this Service\n    with others (e.g. with a family member or caregiver), you are responsible\n    for all the actions they take with respect to the use of your Health\n    Information.\n</p>\n<p>\n    You must follow any additional terms and conditions made available to you in\n    relation to the Service.\n</p>\n<p>\n    Do not misuse the Service, for example by trying to access or use it using a\n    method other than the interface and instructions we provide. You may use the\n    Service only as permitted by law. We may suspend or stop providing the\n    Service to you if you do not comply with these terms and conditions, or if\n    we are investigating a suspected misuse of the Service.\n</p>\n<p>\n    Using the Service does not give you ownership of any intellectual property\n    rights in the Service or the content you access. Donât remove, obscure, or\n    alter any legal notices displayed in connection with the Service.\n</p>\n<p>\n    We may stop providing the Service to you, or may add or create new limits on\n    the Service, for any reason and at any time.\n</p>\n<p>\n    <strong\n        >3. Service is not a comprehensive health record or medical\n        advice</strong\n    >\n</p>\n<p>\n    The Health Information accessed through this Service is not a comprehensive\n    record of your health care in BC.\n</p>\n<p>\n    This Service is not intended to provide you with medical advice or replace\n    the care provided by qualified health care professionals. If you have\n    questions or concerns about your health, please contact your care provider.\n</p>\n<p><strong>4. Privacy Notice</strong></p>\n<p>\n    Your personal information will be collected by the Health Gateway (Ministry\n    of Health) and Service BC under the authority of section 26(c) of the\n    Freedom of Information and Protection of Privacy Act for the purpose of\n    providing access to your health records. Your personal information such as\n    name, email and cell phone number will be shared with other public health\n    service agencies to query your health information and notify you of updates.\n    Your personal information will not be used or disclosed for any other\n    purposes.\n</p>\n<p>\n    The Serviceâs notes and comments features allow you to enter your own notes\n    to provide more information related to your health care. Use of these\n    features is entirely voluntary. Any notes will be stored in the Health\n    Gateway until you choose to delete your account or remove specific notes.\n    Any notes that you create can only be accessed by you securely using your BC\n    Services Card.\n</p>\n<p>\n    If you have any questions about our collection or use of personal\n    information, please direct your inquiries to the Health Gateway team:\n</p>\n<p>\n    <em>\n        Nino Samson<br />\n        Product Owner, Health Gateway<br />\n        Telephone: <a href=\"tel:778-974-2712\">778-974-2712</a><br />\n        Email: <a href=\"mailto:nino.samson@gov.bc.ca\">nino.samson@gov.bc.ca</a\n        ><br />\n        Address: 1483 Douglas Street; PO BOX 9635 STN PROV GOVT, Victoria BC<br />\n    </em>\n</p>\n<p><strong>5. Warranty Disclaimer</strong></p>\n<p>\n    The Service and all of the information it contains are provided \"as is\"\n    without warranty of any kind, whether express or implied. All implied\n    warranties, including, without limitation, implied warranties of\n    merchantability, fitness for a particular purpose, and non-infringement, are\n    hereby expressly disclaimed.\n</p>\n<p><strong>6. Limitation of Liabilities</strong></p>\n<p>\n    Under no circumstances will the Government of British Columbia be liable to\n    any person or business entity for any direct, indirect, special, incidental,\n    consequential, or other damages based on any use of the Service or any\n    website or system to which this Service may be linked, including, without\n    limitation, any lost profits, business interruption, or loss of programs or\n    information, even if the Government of British Columbia has been\n    specifically advised of the possibility of such damages.\n</p>\n<p><strong>7. About these Terms and Conditions</strong></p>\n<p>\n    We may modify these terms of service, or any additional terms that apply to\n    the Service, at any time, for example to reflect changes to the law or\n    changes to the Service. You should review these terms of service regularly.\n    Changes to these terms of service will be effective immediately after they\n    are posted. If you do not agree to any changes to these terms, you should\n    discontinue your use of the Service immediately.\n</p>\n<p>\n    If there is any conflict between these terms of service and any additional\n    terms of service, the additional terms of service will prevail.\n</p>\n<p>\n    These terms of service are governed by and to be construed in accordance\n    with the laws of British Columbia and the federal laws of Canada applicable\n    therein.\n</p>\n",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2020, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("c99fd839-b4a2-40f9-b103-529efccd0dcd"),
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2020, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2021, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LegalAgreementCode = "ToS",
                            LegalText = "<p><strong>HealthGateway Terms of Service</strong></p>\n<p>\n    Use of the Health Gateway service (the <strong>\"Service\"</strong>) is\n    governed by the following terms and conditions. Please read these terms and\n    conditions carefully, as by using the Service you will be deemed to have\n    agreed to them. If you do not agree with these terms and conditions, please\n    do not use the Service.\n</p>\n<p><strong>1. The Health Gateway Service</strong></p>\n<p>\n    The Service provides residents of British Columbia with access to their\n    health information (<strong>\"Health Information\"</strong>). It allows users\n    to, in one place, view their Health Information from various Provincial\n    health information systems, empowering patients and their families to manage\n    their health care.\n</p>\n<p><strong>2. Your use of the Service</strong></p>\n<p>You may only access your own Health Information using the Service.</p>\n<p>\n    If you choose to share the Health Information accessed through this Service\n    with others (e.g. with a family member or caregiver), you are responsible\n    for all the actions they take with respect to the use of your Health\n    Information.\n</p>\n<p>\n    You must follow any additional terms and conditions made available to you in\n    relation to the Service.\n</p>\n<p>\n    Do not misuse the Service, for example by trying to access or use it using a\n    method other than the interface and instructions we provide. You may use the\n    Service only as permitted by law. We may suspend or stop providing the\n    Service to you if you do not comply with these terms and conditions, or if\n    we are investigating a suspected misuse of the Service.\n</p>\n<p>\n    Using the Service does not give you ownership of any intellectual property\n    rights in the Service or the content you access. Donât remove, obscure, or\n    alter any legal notices displayed in connection with the Service.\n</p>\n<p>\n    We may stop providing the Service to you, or may add or create new limits on\n    the Service, for any reason and at any time.\n</p>\n<p>\n    <strong\n        >3. Service is not a comprehensive health record or medical\n        advice</strong\n    >\n</p>\n<p>\n    The Health Information accessed through this Service is not a comprehensive\n    record of your health care in BC.\n</p>\n<p>\n    This Service is not intended to provide you with medical advice or replace\n    the care provided by qualified health care professionals. If you have\n    questions or concerns about your health, please contact your care provider.\n</p>\n<p><strong>4. Privacy Notice</strong></p>\n<p>\n    Your personal information will be collected by the Health Gateway (Ministry\n    of Health) and Service BC under the authority of section 26(c) of the\n    Freedom of Information and Protection of Privacy Act for the purpose of\n    providing access to your health records. Your personal information such as\n    name, email and cell phone number will be shared with other public health\n    service agencies to query your health information and notify you of updates.\n    Your personal information will not be used or disclosed for any other\n    purposes.\n</p>\n<p>\n    The Serviceâs notes and comments features allow you to enter your own notes\n    to provide more information related to your health care. Use of these\n    features is entirely voluntary. Any notes will be stored in the Health\n    Gateway until you choose to delete your account or remove specific notes.\n    Any notes that you create can only be accessed by you securely using your BC\n    Services Card.\n</p>\n<p>\n    If you have any questions about our collection or use of personal\n    information, please direct your inquiries to the Health Gateway team:\n</p>\n<p>\n    <em>\n        Nino Samson\n        <br />\n        Product Owner, Health Gateway\n        <br />\n        Telephone: <a href=\"tel:778-974-2712\">778-974-2712</a>\n        <br />\n        Email: <a href=\"mailto:nino.samson@gov.bc.ca\">nino.samson@gov.bc.ca</a>\n        <br />\n        Address: 1483 Douglas Street; PO BOX 9635 STN PROV GOVT, Victoria BC\n        <br />\n    </em>\n</p>\n<p><strong>5. Privacy Protection Guidance for Minors</strong></p>\n<p>\n    Health Gateway takes the protection of your privacy very seriously and will\n    make sure that your information is secure in the Health Gateway portal,\n    however you will also need to take steps to protect your information. There\n    may be consequences to sharing your device with others, for example people\n    may be able to open your Health Gateway account and see whether you are\n    taking any prescriptions, such as birth control medication or whether you\n    have a positive COVID-19 test result.\n</p>\n<p>Protect your privacy by doing the following:</p>\n<p>\n    It is not recommended that you download the BC Services Card app and set up\n    a Health Gateway account if you cannot fully control who has access to your\n    device. If you are unable to control who has access to your device, for\n    example you do not own your phone or you share your phone or password with\n    others, then the security of your information could be at risk. If this is a\n    shared device, or one you do not fully control, there are other options to\n    access your information. For example, to access your COVID-19 test results,\n    please visit the BC Centre for Disease Control (BCCDC) website.\n</p>\n<p>\n    Before downloading the BC Services Card app and setting up a Health Gateway\n    account, make sure you have a secure password on your device that no one but\n    you knows. For tips on how to create a secure password and password\n    protection, please go to\n    <a\n        href=\"https://www.getcybersafe.gc.ca/en/secure-your-accounts/passphrases-passwords-and-pins\"\n        >https://www.getcybersafe.gc.ca/en/secure-your-accounts/passphrases-passwords-and-pins</a\n    >.\n</p>\n<p>\n    Make sure to log out of your account and close out of the screen once you\n    are finished using the Health Gateway portal and lock and store your device\n    securely when it is not in use.\n</p>\n<p>\n    If you suspect your personal information has been viewed without your\n    permission, please reach out to a trusted adult for help on what to do next.\n    For more information, adults may go to\n    <a\n        href=\"https://www.priv.gc.ca/en/privacy-topics/information-and-advice-for-individuals/privacy-and-kids/\"\n        >https://www.priv.gc.ca/en/privacy-topics/information-and-advice-for-individuals/privacy-and-kids/</a\n    >.\n</p>\n<p>\n    Be suspicious of any unusual requests for your information. For example,\n    Health Gateway will never ask you for any of your personal health\n    information such as medical diagnosis.\n</p>\n<p>\n    For more tips on how to protect your privacy go to\n    <a href=\"https://www.getcybersafe.gc.ca/en/home\"\n        >https://www.getcybersafe.gc.ca/en/home</a\n    >.\n</p>\n<p>\n    If you notice anything unusual in your account or have any privacy\n    questions, please contact the Health Gateway team below for help.\n</p>\n<p>\n    Email: <a href=\"mailto:HealthGateway@gov.bc.ca\">HealthGateway@gov.bc.ca</a>\n</p>\n<p><strong>6. Warranty Disclaimer</strong></p>\n<p>\n    The Service and all of the information it contains are provided \"as is\"\n    without warranty of any kind, whether express or implied. All implied\n    warranties, including, without limitation, implied warranties of\n    merchantability, fitness for a particular purpose, and non-infringement, are\n    hereby expressly disclaimed.\n</p>\n<p><strong>7. Attestation of Guardianship</strong></p>\n<p>\n    By providing the childâs name, date of birth, personal health number and\n    date of COVID-19 test, I declare that I am the childâs legal guardian as per\n    the Family Law Act, the Adoption Act and/or the Child, Family and Community\n    Services Act, and am attesting that I have the authority to request and\n    receive health information respecting the child from third parties.\n</p>\n<p>\n    If I either: (a) cease to be guardian of this child; (b) or lose the right\n    to request or receive health information from third parties respecting this\n    child, I will remove them as a dependent under my Health Gateway account\n    immediately.\n</p>\n<p>\n    I understand that I will no longer be able to access my childâs COVID-19\n    test results once they are 12 years of age. I understand it is a legal\n    offence to falsely claim guardianship or access another individualâs\n    personal health information without legal authority or consent.\n</p>\n<p><strong>8. Limitation of Liabilities</strong></p>\n<p>\n    Under no circumstances will the Government of British Columbia be liable to\n    any person or business entity for any direct, indirect, special, incidental,\n    consequential, or other damages based on any use of the Service or any\n    website or system to which this Service may be linked, including, without\n    limitation, any lost profits, business interruption, or loss of programs or\n    information, even if the Government of British Columbia has been\n    specifically advised of the possibility of such damages.\n</p>\n<p><strong>9. About these Terms and Conditions</strong></p>\n<p>\n    We may modify these terms of service, or any additional terms that apply to\n    the Service, at any time, for example to reflect changes to the law or\n    changes to the Service. You should review these terms of service regularly.\n    Changes to these terms of service will be effective immediately after they\n    are posted. If you do not agree to any changes to these terms, you should\n    discontinue your use of the Service immediately.\n</p>\n<p>\n    If there is any conflict between these terms of service and any additional\n    terms of service, the additional terms of service will prevail.\n</p>\n<p>\n    These terms of service are governed by and to be construed in accordance\n    with the laws of British Columbia and the federal laws of Canada applicable\n    therein.\n</p>\n",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2021, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.LegalAgreementTypeCode", b =>
                {
                    b.Property<string>("LegalAgreementCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("LegalAgreementCode");

                    b.ToTable("LegalAgreementTypeCode");

                    b.HasData(
                        new
                        {
                            LegalAgreementCode = "ToS",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Terms of Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.MessagingVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("MessagingVerificationId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("EmailId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InviteKey")
                        .HasColumnType("uuid");

                    b.Property<string>("SMSNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SMSValidationCode")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)")
                        .HasColumnName("HdId");

                    b.Property<bool>("Validated")
                        .HasColumnType("boolean");

                    b.Property<int>("VerificationAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("VerificationType");

                    b.ToTable("MessagingVerification");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.MessagingVerificationTypeCode", b =>
                {
                    b.Property<string>("MessagingVerificationCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("MessagingVerificationCode");

                    b.ToTable("MessagingVerificationTypeCode");

                    b.HasData(
                        new
                        {
                            MessagingVerificationCode = "Email",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Email Verification Type Code",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            MessagingVerificationCode = "SMS",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SMS Verification Type Code",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("NoteId");

                    b.Property<string>("HdId")
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)")
                        .HasColumnName("UserProfileId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("JournalDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasMaxLength(1344)
                        .HasColumnType("character varying(1344)");

                    b.Property<string>("Title")
                        .HasMaxLength(152)
                        .HasColumnType("character varying(152)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id", "HdId");

                    b.HasIndex("HdId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Packaging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PackagingId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("PackageSize")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("PackageSizeUnit")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PackageSizeUnitFrench")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("PackageType")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PackageTypeFrench")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("ProductInformation")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("UPC")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("Packaging");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.PharmaCareDrug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PharmaCareDrugId");

                    b.Property<string>("BenefitGroupList")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("CFRCode")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DINPIN")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("DosageForm")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("FileDownloadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FormularyListDate")
                        .HasColumnType("Date");

                    b.Property<string>("GenericName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("LCAIndicator")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<decimal?>("LCAPrice")
                        .HasColumnType("numeric(8,4)");

                    b.Property<string>("LimitedUseFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<int?>("MaximumDaysSupply")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaximumPrice")
                        .HasColumnType("numeric(8,4)");

                    b.Property<string>("PayGenericIndicator")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("PharmaCarePlanDescription")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Plan")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<int?>("QuantityLimit")
                        .HasColumnType("integer");

                    b.Property<string>("RDPCategory")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("RDPExcludedPlans")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("RDPPrice")
                        .HasColumnType("numeric(8,4)");

                    b.Property<string>("RDPSubCategory")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("TrialFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("FileDownloadId");

                    b.ToTable("PharmaCareDrug");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.PharmaceuticalStd", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PharmaceuticalStdId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("PharmaceuticalStdDesc")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("PharmaceuticalStd");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ProgramTypeCode", b =>
                {
                    b.Property<string>("ProgramCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("ProgramCode");

                    b.ToTable("ProgramTypeCode");

                    b.HasData(
                        new
                        {
                            ProgramCode = "FED-DRUG-A",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Federal Approved Drug Load",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "FED-DRUG-M",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Federal Marketed Drug Load",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "FED-DRUG-C",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Federal Cancelled Drug Load",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "FED-DRUG-D",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Federal Dormant Drug Load",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "PROV-DRUG",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Provincial Pharmacare Drug Load",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "CFG",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Configuration Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "WEB",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Web Client",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "IMM",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Immunization Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "PAT",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patient Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "MED",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Medication Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "LAB",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Laboratory Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "ADMIN",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Admin Client",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "ENC",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Encounter Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "JOBS",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Job Scheduler",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("RatingId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RatingValue")
                        .HasColumnType("integer");

                    b.Property<bool>("Skip")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ResourceDelegate", b =>
                {
                    b.Property<string>("ResourceOwnerHdid")
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)");

                    b.Property<string>("ProfileHdid")
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)");

                    b.Property<string>("ReasonCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<JsonDocument>("ReasonObject")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ReasonObjectType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("ResourceOwnerHdid", "ProfileHdid", "ReasonCode");

                    b.HasIndex("ProfileHdid");

                    b.HasIndex("ReasonCode");

                    b.ToTable("ResourceDelegate");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ResourceDelegateHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ResourceDelegateHistoryId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProfileHdid")
                        .IsRequired()
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)");

                    b.Property<string>("ReasonCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<JsonDocument>("ReasonObject")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ReasonObjectType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResourceOwnerHdid")
                        .IsRequired()
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("ResourceDelegateHistory");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ResourceDelegateReasonCode", b =>
                {
                    b.Property<string>("ReasonTypeCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("ReasonTypeCode");

                    b.ToTable("ResourceDelegateReasonCode");

                    b.HasData(
                        new
                        {
                            ReasonTypeCode = "COVIDLab",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Resource Delegation for Covid Laboratory",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("RouteId");

                    b.Property<string>("Administration")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("AdministrationCode")
                        .HasColumnType("integer");

                    b.Property<string>("AdministrationFrench")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("Route");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ScheduleId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScheduleDesc")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ScheduleDescFrench")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("StatusId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentStatusFlag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("HistoryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("StatusDesc")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("StatusDescFrench")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.TherapeuticClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("TherapeuticClassId");

                    b.Property<string>("Ahfs")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("AhfsFrench")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("AhfsNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Atc")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("AtcFrench")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.Property<string>("AtcNumber")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("TherapeuticClass");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UserFeedbackId");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSatisfied")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserProfileId")
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("UserFeedback");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserFeedbackTag", b =>
                {
                    b.Property<Guid>("UserFeedbackTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminTagId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserFeedbackId")
                        .HasColumnType("uuid");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("UserFeedbackTagId");

                    b.HasIndex("UserFeedbackId");

                    b.HasIndex("AdminTagId", "UserFeedbackId")
                        .IsUnique();

                    b.ToTable("UserFeedbackTag");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserPreference", b =>
                {
                    b.Property<string>("HdId")
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)")
                        .HasColumnName("UserProfileId");

                    b.Property<string>("Preference")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("HdId", "Preference");

                    b.ToTable("UserPreference");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserProfile", b =>
                {
                    b.Property<string>("HdId")
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)")
                        .HasColumnName("UserProfileId");

                    b.Property<bool>("AcceptedTermsOfService")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ClosedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("EncryptionKey")
                        .HasMaxLength(44)
                        .HasColumnType("character varying(44)");

                    b.Property<Guid?>("IdentityManagementId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastLoginDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SMSNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("HdId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserProfileHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UserProfileHistoryId");

                    b.Property<bool>("AcceptedTermsOfService")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ClosedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("EncryptionKey")
                        .HasMaxLength(44)
                        .HasColumnType("character varying(44)");

                    b.Property<string>("HdId")
                        .IsRequired()
                        .HasMaxLength(52)
                        .HasColumnType("character varying(52)")
                        .HasColumnName("UserProfileId");

                    b.Property<Guid?>("IdentityManagementId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastLoginDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SMSNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("UserProfileHistory");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.VeterinarySpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("VeterinarySpeciesId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Species")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("SpeciesFrench")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<string>("SubSpecies")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("VeterinarySpecies");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ActiveIngredient", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("ActiveIngredient")
                        .HasForeignKey("HealthGateway.Database.Models.ActiveIngredient", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ApplicationSetting", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.ProgramTypeCode", null)
                        .WithMany()
                        .HasForeignKey("Application")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.AuditEvent", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.ProgramTypeCode", null)
                        .WithMany()
                        .HasForeignKey("ApplicationType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.AuditTransactionResultCode", null)
                        .WithMany()
                        .HasForeignKey("TransactionResultCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Comment", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.CommentEntryTypeCode", null)
                        .WithMany()
                        .HasForeignKey("EntryTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Communication", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.CommunicationStatusCode", null)
                        .WithMany()
                        .HasForeignKey("CommunicationStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.CommunicationTypeCode", null)
                        .WithMany()
                        .HasForeignKey("CommunicationTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.CommunicationEmail", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.Communication", "Communication")
                        .WithMany()
                        .HasForeignKey("CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileHdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Communication");

                    b.Navigation("Email");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Company", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("Company")
                        .HasForeignKey("HealthGateway.Database.Models.Company", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.DrugProduct", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.FileDownload", "FileDownload")
                        .WithMany()
                        .HasForeignKey("FileDownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileDownload");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Email", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.EmailStatusCode", null)
                        .WithMany()
                        .HasForeignKey("EmailStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.EmailFormatCode", null)
                        .WithMany()
                        .HasForeignKey("FormatCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.EmailTemplate", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.EmailFormatCode", null)
                        .WithMany()
                        .HasForeignKey("FormatCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.FileDownload", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.ProgramTypeCode", null)
                        .WithMany()
                        .HasForeignKey("ProgramCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Form", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("Form")
                        .HasForeignKey("HealthGateway.Database.Models.Form", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.LegalAgreement", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.LegalAgreementTypeCode", null)
                        .WithMany()
                        .HasForeignKey("LegalAgreementCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.MessagingVerification", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId");

                    b.HasOne("HealthGateway.Database.Models.UserProfile", null)
                        .WithMany("Verifications")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.MessagingVerificationTypeCode", null)
                        .WithMany()
                        .HasForeignKey("VerificationType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Email");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Note", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("HdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Packaging", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("Packaging")
                        .HasForeignKey("HealthGateway.Database.Models.Packaging", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.PharmaCareDrug", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.FileDownload", "FileDownload")
                        .WithMany()
                        .HasForeignKey("FileDownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileDownload");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.PharmaceuticalStd", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", "DrugProduct")
                        .WithOne("PharmaceuticalStd")
                        .HasForeignKey("HealthGateway.Database.Models.PharmaceuticalStd", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrugProduct");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ResourceDelegate", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("ProfileHdid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.ResourceDelegateReasonCode", null)
                        .WithMany()
                        .HasForeignKey("ReasonCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Route", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("Route")
                        .HasForeignKey("HealthGateway.Database.Models.Route", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Status", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithMany("Statuses")
                        .HasForeignKey("DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.TherapeuticClass", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("TherapeuticClass")
                        .HasForeignKey("HealthGateway.Database.Models.TherapeuticClass", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserFeedbackTag", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.AdminTag", "AdminTag")
                        .WithMany()
                        .HasForeignKey("AdminTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.UserFeedback", "UserFeedback")
                        .WithMany("Tags")
                        .HasForeignKey("UserFeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminTag");

                    b.Navigation("UserFeedback");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.VeterinarySpecies", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("VeterinarySpecies")
                        .HasForeignKey("HealthGateway.Database.Models.VeterinarySpecies", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.DrugProduct", b =>
                {
                    b.Navigation("ActiveIngredient");

                    b.Navigation("Company");

                    b.Navigation("Form");

                    b.Navigation("Packaging");

                    b.Navigation("PharmaceuticalStd");

                    b.Navigation("Route");

                    b.Navigation("Statuses");

                    b.Navigation("TherapeuticClass");

                    b.Navigation("VeterinarySpecies");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserFeedback", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserProfile", b =>
                {
                    b.Navigation("Verifications");
                });
#pragma warning restore 612, 618
        }
    }
}
