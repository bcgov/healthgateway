//-------------------------------------------------------------------------
// Copyright Â© 2020 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-------------------------------------------------------------------------
// <auto-generated />
#pragma warning disable CS1591
using Microsoft.EntityFrameworkCore.Migrations;

namespace HealthGateway.Database.Migrations
{
    public partial class PushBannerChange : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            string schema = "gateway";
            string triggerName = "PushBannerChange";
            string table = "Communication";
            string triggerFunction = @$"
CREATE OR REPLACE FUNCTION {schema}.""{triggerName}""()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    NOT LEAKPROOF
AS $BODY$
DECLARE
    data JSON;
    notification JSON;
    send boolean;
    BEGIN
        send = false;
        IF((TG_OP = 'INSERT' OR TG_OP = 'UPDATE') and
            NEW.""CommunicationTypeCode"" = 'Banner')
        THEN
            data = row_to_json(NEW);
            send = true;
        ELSEIF(TG_OP = 'DELETE' and OLD.""CommunicationTypeCode"" = 'Banner') THEN
            data = row_to_json(OLD);
            send = true;
        END IF;
        IF(send) THEN
            notification = json_build_object(
                'Table', TG_TABLE_NAME,
                'Action', TG_OP,
                'Data', data);
            RAISE LOG 'Sending Banner Change notification';
            PERFORM pg_notify('BannerChange', notification::TEXT);
        END IF;
        RETURN NEW;
    END;$BODY$;";

            string trigger = $@"
DROP TRIGGER IF EXISTS ""{triggerName}"" ON {schema}.""{table}"";
CREATE TRIGGER ""{triggerName}""
    AFTER INSERT or UPDATE or DELETE
    ON {schema}.""{table}""
    FOR EACH ROW
    EXECUTE PROCEDURE {schema}.""{triggerName}""();";

            migrationBuilder.Sql(triggerFunction);
            migrationBuilder.Sql(trigger);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            string schema = "gateway";
            string triggerName = "PushBannerChange";
            string table = "Communication";
            migrationBuilder.Sql(@$"DROP TRIGGER IF EXISTS ""{triggerName}"" ON {schema}.""{table}""");
            migrationBuilder.Sql(@$"DROP FUNCTION IF EXISTS {schema}.""{triggerName}""();");
        }
    }
}
