//-------------------------------------------------------------------------
// Copyright © 2020 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-------------------------------------------------------------------------
#pragma warning disable CS1591
// <auto-generated />
using System;
using System.Text.Json;
using HealthGateway.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HealthGateway.Database.Migrations
{
    [DbContext(typeof(GatewayDbContext))]
    [Migration("20200926222603_ModifyUniqueDateRangeConstraint")]
    partial class ModifyUniqueDateRangeConstraint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gateway")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.gateway.trace_seq", "'gateway.trace_seq', '', '1', '1', '1', '999999', 'Int64', 'True'");

            modelBuilder.Entity("HealthGateway.Database.Models.ActiveIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ActiveIngredientId")
                        .HasColumnType("uuid");

                    b.Property<int>("ActiveIngredientCode")
                        .HasColumnType("integer");

                    b.Property<string>("Base")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DosageUnit")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("DosageUnitFrench")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("DosageValue")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Ingredient")
                        .HasColumnType("character varying(240)")
                        .HasMaxLength(240);

                    b.Property<string>("IngredientFrench")
                        .HasColumnType("character varying(400)")
                        .HasMaxLength(400);

                    b.Property<string>("IngredientSuppliedInd")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Notes")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Strength")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("StrengthType")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("StrengthTypeFrench")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("StrengthUnit")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("StrengthUnitFrench")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("ActiveIngredient");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ApplicationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationSettingsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Application", "Component", "Key")
                        .IsUnique();

                    b.ToTable("ApplicationSetting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f279ba2-8e7b-4b1d-8c69-467d94dcb7fb"),
                            Application = "JOBS",
                            Component = "NotifyUpdatedLegalAgreementsJob",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ToS-Last-Checked",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "05/01/2019",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.AuditEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuditEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationSubject")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ApplicationType")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("AuditEventDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ClientIP")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Trace")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("TransactionDuration")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TransactionResultCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("TransactionVersion")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationType");

                    b.HasIndex("TransactionResultCode");

                    b.ToTable("AuditEvent");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.AuditTransactionResultCode", b =>
                {
                    b.Property<string>("ResultCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("ResultCode");

                    b.ToTable("AuditTransactionResultCode");

                    b.HasData(
                        new
                        {
                            ResultCode = "Ok",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Success",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ResultCode = "Fail",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Failure",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ResultCode = "NotAuth",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unauthorized",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ResultCode = "Err",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "System Error",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.BetaRequest", b =>
                {
                    b.Property<string>("HdId")
                        .HasColumnName("BetaRequestId")
                        .HasColumnType("character varying(52)")
                        .HasMaxLength(52);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("HdId");

                    b.ToTable("BetaRequest");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EntryTypeCode")
                        .IsRequired()
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("ParentEntryId")
                        .IsRequired()
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Text")
                        .HasColumnType("character varying(1344)")
                        .HasMaxLength(1344);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("character varying(52)")
                        .HasMaxLength(52);

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Communication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommunicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("CommunicationStatusCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CommunicationTypeCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EffectiveDateTime")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDateTime")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationStatusCode");

                    b.HasIndex("CommunicationTypeCode");

                    b.ToTable("Communication");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.CommunicationEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommunicationEmailId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserProfileHdId")
                        .IsRequired()
                        .HasColumnType("character varying(52)")
                        .HasMaxLength(52);

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationId");

                    b.HasIndex("EmailId");

                    b.HasIndex("UserProfileHdId");

                    b.ToTable("CommunicationEmail");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.CommunicationStatusCode", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("StatusCode");

                    b.ToTable("CommunicationStatusCode");

                    b.HasData(
                        new
                        {
                            StatusCode = "New",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A newly created Communication",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Pending",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A Communication pending batch pickup",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Processing",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Communication is being processed",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Processed",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A Communication which has been sent",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Error",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A Communication that will not be sent",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Draft",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A draft Communication which has not been published",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.CommunicationTypeCode", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("StatusCode");

                    b.ToTable("CommunicationTypeCode");

                    b.HasData(
                        new
                        {
                            StatusCode = "Banner",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Banner communication type",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Email",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Email communication type",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("AddressBillingFlag")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("AddressMailingFlag")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("AddressNotificationFlag")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("AddressOther")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("CityName")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<int>("CompanyCode")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("CompanyType")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Country")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("CountryFrench")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ManufacturerCode")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("PostOfficeBox")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PostalCode")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Province")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("ProvinceFrench")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("StreetName")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("SuiteNumber")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("Company");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.DrugProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("AccessionNumber")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("AiGroupNumber")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("BrandNameFrench")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descriptor")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("DescriptorFrench")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("DrugClass")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("DrugClassFrench")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("DrugCode")
                        .IsRequired()
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("DrugIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("character varying(29)")
                        .HasMaxLength(29);

                    b.Property<Guid>("FileDownloadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NumberOfAis")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("PediatricFlag")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("ProductCategorization")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("FileDownloadId");

                    b.ToTable("DrugProduct");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailId")
                        .HasColumnType("uuid");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailStatusCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FormatCode")
                        .IsRequired()
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<DateTime?>("LastRetryDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SentDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SmtpStatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("EmailStatusCode");

                    b.HasIndex("FormatCode");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.EmailFormatCode", b =>
                {
                    b.Property<string>("FormatCode")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("FormatCode");

                    b.ToTable("EmailFormatCode");

                    b.HasData(
                        new
                        {
                            FormatCode = "Text",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            FormatCode = "HTML",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.EmailStatusCode", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("StatusCode");

                    b.ToTable("EmailStatusCode");

                    b.HasData(
                        new
                        {
                            StatusCode = "New",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A newly created email",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Pending",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An email pending batch pickup",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Processed",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An email that has been sent",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            StatusCode = "Error",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "An Email that will not be sent",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FormatCode")
                        .IsRequired()
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("FormatCode");

                    b.ToTable("EmailTemplate");

                    b.HasData(
                        new
                        {
                            Id = new Guid("040c2ec3-d6c0-4199-9e4b-ebe6da48d52a"),
                            Body = @"<!doctype html>
<html lang=""en"">
<head></head>
<body style = ""margin:0"">
    <table cellspacing=""0"" align=""left"" width=""100%"" style=""margin:0;color:#707070;font-family:Helvetica;font-size:12px;"">
        <tr style = ""background:#003366;"">
            <th width=""45"" ></th>
            <th width=""350"" align=""left"" style=""text-align:left;"">
                <div role=""img"" aria - label=""Health Gateway Logo"">
                    <img src=""${ActivationHost}/Logo.png"" alt=""Health Gateway Logo""/>
                </div>
            </th>
            <th width=""""></th>
        </tr>
        <tr>
            <td colspan=""3"" height=""20""></td>
        </tr>
        <tr>
            <td></td>
            <td>
                <h1 style = ""font-size:18px;"">Almost there!</h1>
                <p>We've received a request to register your email address for a Health Gateway account.</p>
                <p>To activate your account, please verify your email by clicking the link:</p>
                <a style = ""color:#1292c5;font-weight:600;"" href = ""${ActivationHost}/ValidateEmail/${InviteKey}""> Health Gateway Account Verification </a>
            </td>
            <td></td>
        </tr>
    </table>
</body>
</html>",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "Registration",
                            Priority = 10,
                            Subject = "Health Gateway Email Verification ${Environment}",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("896f8f2e-3bed-400b-acaf-51dd6082b4bd"),
                            Body = @"<!doctype html>
    <html lang=""en"">
    <head></head>
    <body style=""margin:0"">
    <table cellspacing=""0"" align=""left"" width=""100%"" style=""margin:0;color:#707070;font-family:Helvetica;font-size:12px;"">
        <tr style=""background:#036;"">
            <th width=""45""></th>
            <th width=""350"" align=""left"" style=""text-align:left;"">
                <div role=""img"" aria-label=""Health Gateway Logo"">
                    <img src=""${host}/Logo.png"" alt=""Health Gateway Logo""/>
                </div>
            </th>
            <th width=""""></th>
        </tr>
        <tr>
            <td colspan=""3"" height=""20""></td>
        </tr>
        <tr>
            <td></td>
            <td>
                <h1 style=""font-size:18px;"">Good day,</h1>
                <p>You are receiving this email as a Health Gateway patient partner. We welcome your feedback and suggestions as one of the first users of the application.</p>
                <p>Please click on the link below which will take you to your registration for the Health Gateway service. This registration link is valid for your one-time use only. We kindly ask that you do not share your link with anyone else.</p>
                <a style = ""font-weight:600;"" href=""${host}/registrationInfo?inviteKey=${inviteKey}&email=${emailTo}"">Register Now</a>
                <p>If you have any questions about the registration process, including signing up to use your BC Services Card for authentication, please contact Nino Samson at nino.samson@gov.bc.ca.</p>
            </td>
            <td></td>
        </tr>
    </table>
</body>
</html>",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "Invite",
                            Priority = 1,
                            Subject = "Health Gateway Private Invitation",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("2ab5d4aa-c4c9-4324-a753-cde4e21e7612"),
                            Body = @"<!doctype html>
    <html lang=""en"">
    <head></head>
    <body style=""margin:0"">
    <table cellspacing=""0"" align=""left"" width=""100%"" style=""margin:0;color:#707070;font-family:Helvetica;font-size:12px;"">
        <tr style=""background:#036;"">
            <th width=""45""></th>
            <th width=""350"" align=""left"" style=""text-align:left;"">
                <div role=""img"" aria-label=""Health Gateway Logo"">
                    <img src=""${host}/Logo.png"" alt=""Health Gateway Logo""/>
                </div>
            </th>
            <th width=""""></th>
        </tr>
        <tr>
            <td colspan=""3"" height=""20""></td>
        </tr>
        <tr>
            <td></td>
            <td>
                <h1 style=""font-size:18px;"">Good day,</h1>
                <p>Thank you for joining the wait list to be an early user of the Health Gateway.</p>
                <p>You will receive an email in the near future with a registration link.</p>
            </td>
            <td></td>
        </tr>
    </table>
</body>
</html>",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "BetaConfirmation",
                            Priority = 1,
                            Subject = "Health Gateway Waitlist Confirmation",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("eb695050-e2fb-4933-8815-3d4656e4541d"),
                            Body = @"<!doctype html>
<html lang=""en"">
<head>
</head>
<body style=""margin:0"">
    <table cellspacing=""0"" align=""left"" width=""100%"" style=""margin:0;color:#707070;font-family:Helvetica;font-size:12px;"">
        <tr style=""background:#036;"">
            <th width=""45""></th>
            <th width=""350"" align=""left"" style=""text-align:left;"">
                <div role=""img"" aria-label=""Health Gateway Logo"">
                    <img src=""${host}/Logo.png"" alt=""Health Gateway Logo"" />
                </div>
            </th>
            <th width=""""></th>
        </tr>
        <tr>
            <td colspan=""3"" height=""20""></td>
        </tr>
        <tr>
            <td></td>
            <td>
                <h1 style=""font-size:18px;"">Hi,</h1>
                <p>
                    You are receiving this email as a user of the Health Gateway. We have updated our Terms of Service, effective ${effectivedate}.
                </p>
                <p>For more information, we encourage you to review the full <a href=""${host}/${path}"">Terms of Service</a> and check out the <a href=""https://github.com/bcgov/healthgateway/wiki"">release notes</a> for a summary of new features.</p>
                <p>If you have any questions or wish to provide any feedback, please contact <a href=""mailto:${contactemail}"">${contactemail}</a>.</p>
                <p>Regards,</p>
                <p>Health Gateway Team</p>
            </td>
            <td></td>
        </tr>
    </table>
</body>
</html>",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "TermsOfService",
                            Priority = 1,
                            Subject = "Health Gateway Updated Terms of Service ",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("79503a38-c14a-4992-b2fe-5586629f552e"),
                            Body = @"<!doctype html>
<html lang=""en"">
<head>
</head>
<body style=""margin:0"">
    <table cellspacing=""0"" align=""left"" width=""100%"" style=""margin:0;color:#707070;font-family:Helvetica;font-size:12px;"">
        <tr style=""background:#036;"">
            <th width=""45""></th>
            <th width=""350"" align=""left"" style=""text-align:left;"">
                <div role=""img"" aria-label=""Health Gateway Logo"">
                    <img src=""${host}/Logo.png"" alt=""Health Gateway Logo"" />
                </div>
            </th>
            <th width=""""></th>
        </tr>
        <tr>
            <td colspan=""3"" height=""20""></td>
        </tr>
        <tr>
            <td></td>
            <td>
                <h1 style=""font-size:18px;"">Hi,</h1>
                <p>
                    You have closed your Health Gateway account. If you would like to recover your account, please login to Health Gateway within the next 30 days and click “Recover Account”. No further action is required if you want your account and personally entered information to be removed from the Health Gateway after this time period.
                </p>
                <p>Thanks,</p>
                <p>Health Gateway Team</p>
            </td>
            <td></td>
        </tr>
    </table>
</body>
</html>",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "AccountClosed",
                            Priority = 1,
                            Subject = "Health Gateway Account Closed ",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("2fe8c825-d4de-4884-be6a-01a97b466425"),
                            Body = @"<!doctype html>
<html lang=""en"">
<head>
</head>
<body style=""margin:0"">
    <table cellspacing=""0"" align=""left"" width=""100%"" style=""margin:0;color:#707070;font-family:Helvetica;font-size:12px;"">
        <tr style=""background:#036;"">
            <th width=""45""></th>
            <th width=""350"" align=""left"" style=""text-align:left;"">
                <div role=""img"" aria-label=""Health Gateway Logo"">
                    <img src=""${host}/Logo.png"" alt=""Health Gateway Logo"" />
                </div>
            </th>
            <th width=""""></th>
        </tr>
        <tr>
            <td colspan=""3"" height=""20""></td>
        </tr>
        <tr>
            <td></td>
            <td>
                <h1 style=""font-size:18px;"">Hi,</h1>
                <p>
                    You have successfully recovered your Health Gateway account. You may continue to use the service as you did before.
                </p>
                <p>Thanks,</p>
                <p>Health Gateway Team</p>
            </td>
            <td></td>
        </tr>
    </table>
</body>
</html>",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "AccountRecovered",
                            Priority = 1,
                            Subject = "Health Gateway Account Recovered",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("d9898318-4e53-4074-9979-5d24bd370055"),
                            Body = @"<!doctype html>
<html lang=""en"">
<head>
</head>
<body style=""margin:0"">
    <table cellspacing=""0"" align=""left"" width=""100%"" style=""margin:0;color:#707070;font-family:Helvetica;font-size:12px;"">
        <tr style=""background:#036;"">
            <th width=""45""></th>
            <th width=""350"" align=""left"" style=""text-align:left;"">
                <div role=""img"" aria-label=""Health Gateway Logo"">
                    <img src=""${host}/Logo.png"" alt=""Health Gateway Logo"" />
                </div>
            </th>
            <th width=""""></th>
        </tr>
        <tr>
            <td colspan=""3"" height=""20""></td>
        </tr>
        <tr>
            <td></td>
            <td>
                <h1 style=""font-size:18px;"">Hi,</h1>
                <p>
                    Your Health Gateway account closure has been completed. Your account and personally entered information have been removed from the application. You are welcome to register again for the Health Gateway in the future.
                </p>
                <p>Thanks,</p>
                <p>Health Gateway Team</p>
            </td>
            <td></td>
        </tr>
    </table>
</body>
</html>",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormatCode = "HTML",
                            From = "HG_Donotreply@gov.bc.ca",
                            Name = "AccountRemoved",
                            Priority = 1,
                            Subject = "Health Gateway Account Closure Complete",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.FileDownload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FileDownloadId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("character varying(44)")
                        .HasMaxLength(44);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(35)")
                        .HasMaxLength(35);

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("ProgramCode")
                        .IsUnique();

                    b.ToTable("FileDownload");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("PharmaceuticalForm")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<int>("PharmaceuticalFormCode")
                        .HasColumnType("integer");

                    b.Property<string>("PharmaceuticalFormFrench")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("Form");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.GenericCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GenericCacheId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("ExpiryDateTime")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HdId")
                        .IsRequired()
                        .HasColumnType("character varying(54)")
                        .HasMaxLength(54);

                    b.Property<JsonDocument>("JSON")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("JSONType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("GenericCache");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.LegalAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LegalAgreementsId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EffectiveDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalAgreementCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LegalText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("LegalAgreementCode");

                    b.ToTable("LegalAgreement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5acf1de-2f5f-431e-955d-a837d5854182"),
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LegalAgreementCode = "ToS",
                            LegalText = @"<p><strong>HealthGateway Terms of Service</strong></p>
<p>
    Use of this service is governed by the following terms and conditions. Please read these terms and conditions
    carefully, as by using this website you will be deemed to have agreed to them. If you do not agree with these terms
    and conditions, do not use this service.
</p>
<p>
    The Health Gateway provides BC residents with access to their health information empowering patients and their
    families to manage their health care. In accessing your health information through this service, you acknowledge
    that the information within does not represent a comprehensive record of your health care in BC. No personal health
    information will be stored within the Health Gateway application. Each time you login, your health information will
    be fetched from information systems within BC and purged upon logout. If you choose to share your health information
    accessed through the website with a family member or caregiver, you are responsible for all the actions they take
    with respect to the use of your information.
</p>
<p>
    This service is not intended to provide you with medical advice nor replace the care provided by qualified health
    care professionals. If you have questions or concerns about your health, please contact your care provider.
</p>
<p>
    The personal information you provide (Name and Email) will be used for the purpose of connecting your Health Gateway
    account to your BC Services Card account under the authority of section 33(a) of the Freedom of Information and
    Protection of Privacy Act. This will be done through the BC Services Identity Assurance Service. Once your identity
    is verified using your BC Services Card, you will be able to view your health records from various health
    information systems in one place. Health Gateway’s collection of your personal information is under the authority of
    section 26(c) of the Freedom of Information and Protection of Privacy Act.
</p>
<p>
    If you have any questions about our collection or use of personal information, please direct your inquiries to the
    Health Gateway team:
</p>
<p>
    <i
        ><div>Nino Samson</div>
        <div>Product Owner, Health Gateway</div>
        <div>Telephone: 778-974-2712</div>
        <div>Email: nino.samson@gov.bc.ca</div>
    </i>
</p>

<p><strong>Limitation of Liabilities</strong></p>
<p>
    Under no circumstances will the Government of British Columbia be liable to any person or business entity for any
    direct, indirect, special, incidental, consequential, or other damages based on any use of this website or any other
    website to which this site is linked, including, without limitation, any lost profits, business interruption, or
    loss of programs or information, even if the Government of British Columbia has been specifically advised of the
    possibility of such damages.
</p>",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("ec438d12-f8e2-4719-8444-28e35d34674c"),
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LegalAgreementCode = "ToS",
                            LegalText = @"<p><strong>HealthGateway Terms of Service</strong></p>
<p>
    Use of the Health Gateway service (the “Service”) is governed by the following terms and conditions. Please read
    these terms and conditions carefully, as by using the Service you will be deemed to have agreed to them. If you do
    not agree with these terms and conditions, please do not use the Service.
</p>
<p>
    <p><strong>1. The Health Gateway Service</strong></p>
    The Service provides residents of British Columbia with access to their health information (<strong>""Health
        Information""</strong>). It allows users to, in one place, view their Health Information from various Provincial
    health information systems, empowering patients and their families to manage their health care.
</p>
<p><strong>2. Your use of the Service </strong></p>
<p>
    You may only access your own Health Information using the Service.
</p>
<p>
    If you choose to share the Health Information accessed through this Service with others (e.g. with a family member
    or caregiver), you are responsible for all the actions they take with respect to the use of your Health Information.
</p>
<p>
    You must follow any additional terms and conditions made available to you in relation to the Service.
</p>
<p>
    Do not misuse the Service, for example by trying to access or use it using a method other than the interface and
    instructions we provide. You may use the Service only as permitted by law. We may suspend or stop providing the
    Service to you if you do not comply with these terms and conditions, or if we are investigating a suspected misuse
    of the Service.
</p>
<p>
    Using the Service does not give you ownership of any intellectual property rights in the Service or the content you
    access. Don’t remove, obscure, or alter any legal notices displayed in connection with the Service.
</p>
<p>
    We may stop providing the Service to you, or may add or create new limits on the Service, for any reason and at any
    time.
</p>
<p><strong>3. Service is not a comprehensive health record or medical advice</strong></p>
<p>
    The Health Information accessed through this Service is not a comprehensive record of your health care in BC.
</p>
<p>
    This Service is not intended to provide you with medical advice or replace the care provided by qualified health
    care professionals. If you have questions or concerns about your health, please contact your care provider.
</p>
<p><strong>4. Privacy Notice</strong></p>
<p>
    The personal information you provide the Service (Name and Email) will be used for the purpose of connecting your
    Health Gateway account to your BC Services Card account under the authority of section 26(c) of the Freedom of
    Information and Protection of Privacy Act. Once your BC Services Card is verified by the Service, you will be able
    to view your Health Information using the Service. The Service’s collection of your personal information is under
    the authority of section 26(c) of the Freedom of Information and Protection of Privacy Act.
</p>
<p>
    The Service’s notes feature allows you to enter your own notes to provide more information related to your health
    care. Use of this feature is entirely voluntary. Any notes will be stored in the Health Gateway in perpetuity, or
    until you choose to delete your account or remove specific notes. Any notes that you create can only be accessed by
    you securely using your BC Services Card.
</p>
<p>
    If you have any questions about our collection or use of personal information, please direct your inquiries to the
    Health Gateway team:
</p>
<p>
    <i>
        <div>Nino Samson</div>
        <div>Product Owner, Health Gateway</div>
        <div>Telephone: <a href=""tel:778-974-2712"">778-974-2712</a></div>
        <div>Email: <a href=""mailto:nino.samson@gov.bc.ca"">nino.samson@gov.bc.ca</a></div>
    </i>
</p>
<p><strong>5. Warranty Disclaimer</strong></p>
<p>
    The Service and all of the information it contains are provided "" as is"" without warranty of any kind, whether
    express or implied. All implied warranties, including, without limitation, implied warranties of
    merchantability, fitness for a particular purpose, and non-infringement, are hereby expressly
    disclaimed. </p>
<p><strong>6. Limitation of Liabilities</strong></p>
<p>
    Under no circumstances will the Government of British Columbia be liable to any person or business entity for any
    direct, indirect, special, incidental, consequential, or other damages based on any use of the Service or any
    website or system to which this Service may be linked, including, without limitation, any lost profits, business
    interruption, or loss of programs or information, even if the Government of British Columbia has been specifically
    advised of the possibility of such damages.
</p>
<p><strong>7. About these Terms and Conditions</strong></p>
<p>
    We may modify these terms and conditions, or any additional terms and conditions that apply to the Service, at any
    time, for example to reflect changes to the law or changes to the Service. You should review these terms and
    conditions regularly. Changes to these terms and conditions will be effective immediately after they are posted. If
    you do not agree to any changes to these terms, you should discontinue your use of the Service immediately.
    If there is any conflict between these terms and conditions and any additional terms and conditions, the additional
    terms and conditions will prevail.
    These terms and conditions are governed by and to be construed in accordance with the laws of British Columbia and
    the federal laws of Canada applicable therein.
</p>",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            Id = new Guid("1d94c170-5118-4aa6-ba31-e3e07274ccbd"),
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2020, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveDate = new DateTime(2020, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LegalAgreementCode = "ToS",
                            LegalText = @"<p><strong>HealthGateway Terms of Service</strong></p>
<p>
    Use of the Health Gateway service (the <strong>""Service""</strong>) is governed by the following terms and
    conditions. Please read these terms and conditions carefully, as by using the Service you will
    be deemed to have agreed to them. If you do not agree with these terms and conditions,
    please do not use the Service.
</p>
<p>
<p><strong>1. The Health Gateway Service</strong></p>
<p>
    The Service provides residents of British Columbia with access to their health information
    (<strong>""Health Information""</strong>).  It allows users to, in one place, view their Health Information from
    various Provincial health information systems, empowering patients and their families to manage their health care.
</p>
<p><strong>2. Your use of the Service</strong></p>
<p>
    You may only access your own Health Information using the Service.
</p>
<p>
    If you choose to share the Health Information accessed through this Service with others (e.g.
    with a family member or caregiver), you are responsible for all the actions they take with
    respect to the use of your Health Information.
</p>
<p>
    You must follow any additional terms and conditions made available to you in relation to the
    Service.
</p>
<p>
    Do not misuse the Service, for example by trying to access or use it using a method other
    than the interface and instructions we provide.  You may use the Service only as permitted
    by law.  We may suspend or stop providing the Service to you if you do not comply with
    these terms and conditions, or if we are investigating a suspected misuse of the Service.
</p>
<p>
    Using the Service does not give you ownership of any intellectual property rights in the
    Service or the content you access.  Don’t remove, obscure, or alter any legal notices
    displayed in connection with the Service.
</p>
<p>
    We may stop providing the Service to you, or may add or create new limits on the Service,
    for any reason and at any time.
</p>
<p><strong>3. Service is not a comprehensive health record or medical advice</strong></p>
<p>
    The Health Information accessed through this Service is not a comprehensive record of your health care in BC.
</p>
<p>
    This Service is not intended to provide you with medical advice or replace the care provided 
    by qualified health care professionals. If you have questions or concerns about your health, 
    please contact your care provider.
</p>
<p><strong>4. Privacy Notice</strong></p>
<p>
    Your personal information will be collected by the Health Gateway (Ministry of Health) and 
    Service BC under the authority of section 26(c) of the Freedom of Information and Protection 
    of Privacy Act for the purpose of providing access to your health records. Your personal 
    information such as name, email and cell phone number will be shared with other public 
    health service agencies to query your health information and notify you of updates. Your 
    personal information will not be used or disclosed for any other purposes.
</p>
<p>
    The Service’s notes and comments features allow you to enter your own notes to provide 
    more information related to your health care. Use of these features is entirely voluntary. Any 
    notes will be stored in the Health Gateway until you choose to delete your account or 
    remove specific notes. Any notes that you create can only be accessed by you securely using 
    your BC Services Card.
</p>
<p>
    If you have any questions about our collection or use of personal information, please direct 
    your inquiries to the Health Gateway team:
</p>
<p>
    <i>
        Nino Samson<br />
        Product Owner, Health Gateway<br />
        Telephone: <a href=""tel:778-974-2712"">778-974-2712</a><br />
        Email: <a href=""mailto:nino.samson@gov.bc.ca"">nino.samson@gov.bc.ca</a><br />
        Address: 1483 Douglas Street; PO BOX 9635 STN PROV GOVT, Victoria BC<br />
    </i>
</p>
<p><strong>5. Warranty Disclaimer</strong></p>
<p>
    The Service and all of the information it contains are provided ""as is"" without warranty of 
    any kind, whether express or implied. All implied warranties, including, without limitation, 
    implied warranties of merchantability, fitness for a particular purpose, and non-infringement, 
    are hereby expressly disclaimed.
</p>
<p><strong>6. Limitation of Liabilities</strong></p>
<p>
    Under no circumstances will the Government of British Columbia be liable to any person or 
    business entity for any direct, indirect, special, incidental, consequential, or other damages 
    based on any use of the Service or any website or system to which this Service may be linked, 
    including, without limitation, any lost profits, business interruption, or loss of programs or 
    information, even if the Government of British Columbia has been specifically advised of the 
    possibility of such damages.
</p>
<p><strong>7. About these Terms and Conditions</strong></p>
<p>
    We may modify these terms of service, or any additional terms that apply to the Service, at 
    any time, for example to reflect changes to the law or changes to the Service.  You should 
    review these terms of service regularly.  Changes to these terms of service will be effective 
    immediately after they are posted.  If you do not agree to any changes to these terms, you 
    should discontinue your use of the Service immediately.
</p>
<p>
    If there is any conflict between these terms of service and any additional terms of service, 
    the additional terms of service will prevail.
</p>
<p>
    These terms of service are governed by and to be construed in accordance with the laws of 
    British Columbia and the federal laws of Canada applicable therein.
</p>",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2020, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.LegalAgreementTypeCode", b =>
                {
                    b.Property<string>("LegalAgreementCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("LegalAgreementCode");

                    b.ToTable("LegalAgreementTypeCode");

                    b.HasData(
                        new
                        {
                            LegalAgreementCode = "ToS",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Terms of Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.MessagingVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MessagingVerificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("EmailId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HdId")
                        .HasColumnType("character varying(52)")
                        .HasMaxLength(52);

                    b.Property<Guid>("InviteKey")
                        .HasColumnType("uuid");

                    b.Property<string>("SMSNumber")
                        .HasColumnType("text");

                    b.Property<string>("SMSValidationCode")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Validated")
                        .HasColumnType("boolean");

                    b.Property<int>("VerificationAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationType")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("VerificationType");

                    b.ToTable("MessagingVerification");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.MessagingVerificationTypeCode", b =>
                {
                    b.Property<string>("MessagingVerificationCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("MessagingVerificationCode");

                    b.ToTable("MessagingVerificationTypeCode");

                    b.HasData(
                        new
                        {
                            MessagingVerificationCode = "Email",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Email Verification Type Code",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            MessagingVerificationCode = "SMS",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SMS Verification Type Code",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("HdId")
                        .HasColumnName("UserProfileId")
                        .HasColumnType("character varying(52)")
                        .HasMaxLength(52);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("JournalDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasColumnType("character varying(1344)")
                        .HasMaxLength(1344);

                    b.Property<string>("Title")
                        .HasColumnType("character varying(152)")
                        .HasMaxLength(152);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id", "HdId");

                    b.HasIndex("HdId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Packaging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PackagingId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("PackageSize")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("PackageSizeUnit")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("PackageSizeUnitFrench")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("PackageType")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("PackageTypeFrench")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("ProductInformation")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UPC")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("Packaging");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.PharmaCareDrug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PharmaCareDrugId")
                        .HasColumnType("uuid");

                    b.Property<string>("BenefitGroupList")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("CFRCode")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DINPIN")
                        .IsRequired()
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("DosageForm")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("Date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("FileDownloadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FormularyListDate")
                        .HasColumnType("Date");

                    b.Property<string>("GenericName")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<string>("LCAIndicator")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("LCAPrice")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("LimitedUseFlag")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Manufacturer")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<int?>("MaximumDaysSupply")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaximumPrice")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("PayGenericIndicator")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("PharmaCarePlanDescription")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Plan")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<int?>("QuantityLimit")
                        .HasColumnType("integer");

                    b.Property<string>("RDPCategory")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("RDPExcludedPlans")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("RDPPrice")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("RDPSubCategory")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("TrialFlag")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("FileDownloadId");

                    b.ToTable("PharmaCareDrug");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.PharmaceuticalStd", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PharmaceuticalStdId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("PharmaceuticalStdDesc")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("PharmaceuticalStd");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ProgramTypeCode", b =>
                {
                    b.Property<string>("ProgramCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("ProgramCode");

                    b.ToTable("ProgramTypeCode");

                    b.HasData(
                        new
                        {
                            ProgramCode = "FED-DRUG-A",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Federal Approved Drug Load",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "FED-DRUG-M",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Federal Marketed Drug Load",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "FED-DRUG-C",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Federal Cancelled Drug Load",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "FED-DRUG-D",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Federal Dormant Drug Load",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "PROV-DRUG",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Provincial Pharmacare Drug Load",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "CFG",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Configuration Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "WEB",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Web Client",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "IMM",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Immunization Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "PAT",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patient Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "MED",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Medication Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "LAB",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Laboratory Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "ADMIN",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Admin Client",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "ENC",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Encounter Service",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        },
                        new
                        {
                            ProgramCode = "JOBS",
                            CreatedBy = "System",
                            CreatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Job Scheduler",
                            UpdatedBy = "System",
                            UpdatedDateTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0u
                        });
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RatingId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RatingValue")
                        .HasColumnType("integer");

                    b.Property<bool>("Skip")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RouteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Administration")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<int>("AdministrationCode")
                        .HasColumnType("integer");

                    b.Property<string>("AdministrationFrench")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("Route");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ScheduleDesc")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("ScheduleDescFrench")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentStatusFlag")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("HistoryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LotNumber")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("StatusDesc")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("StatusDescFrench")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.TherapeuticClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TherapeuticClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Ahfs")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("AhfsFrench")
                        .HasColumnType("character varying(160)")
                        .HasMaxLength(160);

                    b.Property<string>("AhfsNumber")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Atc")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("AtcFrench")
                        .HasColumnType("character varying(240)")
                        .HasMaxLength(240);

                    b.Property<string>("AtcNumber")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("TherapeuticClass");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserFeedbackId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSatisfied")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserProfileId")
                        .HasColumnType("character varying(52)")
                        .HasMaxLength(52);

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserFeedback");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserPreference", b =>
                {
                    b.Property<string>("HdId")
                        .HasColumnName("UserProfileId")
                        .HasColumnType("character varying(52)")
                        .HasMaxLength(52);

                    b.Property<string>("Preference")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("HdId", "Preference");

                    b.ToTable("UserPreference");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserProfile", b =>
                {
                    b.Property<string>("HdId")
                        .HasColumnName("UserProfileId")
                        .HasColumnType("character varying(52)")
                        .HasMaxLength(52);

                    b.Property<bool>("AcceptedTermsOfService")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ClosedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<string>("EncryptionKey")
                        .HasColumnType("character varying(44)")
                        .HasMaxLength(44);

                    b.Property<Guid?>("IdentityManagementId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SMSNumber")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("HdId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserProfileHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserProfileHistoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("AcceptedTermsOfService")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ClosedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(254)")
                        .HasMaxLength(254);

                    b.Property<string>("EncryptionKey")
                        .HasColumnType("character varying(44)")
                        .HasMaxLength(44);

                    b.Property<string>("HdId")
                        .IsRequired()
                        .HasColumnName("UserProfileId")
                        .HasColumnType("character varying(52)")
                        .HasMaxLength(52);

                    b.Property<Guid?>("IdentityManagementId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SMSNumber")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("UserProfileHistory");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.VeterinarySpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VeterinarySpeciesId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DrugProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Species")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("SpeciesFrench")
                        .HasColumnType("character varying(160)")
                        .HasMaxLength(160);

                    b.Property<string>("SubSpecies")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DrugProductId")
                        .IsUnique();

                    b.ToTable("VeterinarySpecies");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ActiveIngredient", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("ActiveIngredient")
                        .HasForeignKey("HealthGateway.Database.Models.ActiveIngredient", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.ApplicationSetting", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.ProgramTypeCode", null)
                        .WithMany()
                        .HasForeignKey("Application")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.AuditEvent", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.ProgramTypeCode", null)
                        .WithMany()
                        .HasForeignKey("ApplicationType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.AuditTransactionResultCode", null)
                        .WithMany()
                        .HasForeignKey("TransactionResultCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Comment", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Communication", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.CommunicationStatusCode", null)
                        .WithMany()
                        .HasForeignKey("CommunicationStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.CommunicationTypeCode", null)
                        .WithMany()
                        .HasForeignKey("CommunicationTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.CommunicationEmail", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.Communication", "Communication")
                        .WithMany()
                        .HasForeignKey("CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileHdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Company", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("Company")
                        .HasForeignKey("HealthGateway.Database.Models.Company", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.DrugProduct", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.FileDownload", "FileDownload")
                        .WithMany()
                        .HasForeignKey("FileDownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Email", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.EmailStatusCode", null)
                        .WithMany()
                        .HasForeignKey("EmailStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGateway.Database.Models.EmailFormatCode", null)
                        .WithMany()
                        .HasForeignKey("FormatCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.EmailTemplate", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.EmailFormatCode", null)
                        .WithMany()
                        .HasForeignKey("FormatCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.FileDownload", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.ProgramTypeCode", null)
                        .WithMany()
                        .HasForeignKey("ProgramCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Form", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("Form")
                        .HasForeignKey("HealthGateway.Database.Models.Form", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.LegalAgreement", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.LegalAgreementTypeCode", null)
                        .WithMany()
                        .HasForeignKey("LegalAgreementCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.MessagingVerification", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId");

                    b.HasOne("HealthGateway.Database.Models.MessagingVerificationTypeCode", null)
                        .WithMany()
                        .HasForeignKey("VerificationType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Note", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("HdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Packaging", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("Packaging")
                        .HasForeignKey("HealthGateway.Database.Models.Packaging", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.PharmaCareDrug", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.FileDownload", "FileDownload")
                        .WithMany()
                        .HasForeignKey("FileDownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.PharmaceuticalStd", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", "DrugProduct")
                        .WithOne("PharmaceuticalStd")
                        .HasForeignKey("HealthGateway.Database.Models.PharmaceuticalStd", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Route", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("Route")
                        .HasForeignKey("HealthGateway.Database.Models.Route", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.Status", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithMany("Statuses")
                        .HasForeignKey("DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.TherapeuticClass", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("TherapeuticClass")
                        .HasForeignKey("HealthGateway.Database.Models.TherapeuticClass", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthGateway.Database.Models.UserFeedback", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("HealthGateway.Database.Models.VeterinarySpecies", b =>
                {
                    b.HasOne("HealthGateway.Database.Models.DrugProduct", null)
                        .WithOne("VeterinarySpecies")
                        .HasForeignKey("HealthGateway.Database.Models.VeterinarySpecies", "DrugProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
