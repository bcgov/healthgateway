// -------------------------------------------------------------------------
//  Copyright Â© 2019 Province of British Columbia
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// -------------------------------------------------------------------------
// <auto-generated />
namespace HealthGateway.Immunization.Test.Service
{
    using DeepEqual.Syntax;
    using HealthGateway.Common.Models;
    using HealthGateway.Common.Models.PHSA;
    using HealthGateway.Immunization.Delegates;
    using HealthGateway.Immunization.Models;
    using HealthGateway.Immunization.Models.PHSA;
    using HealthGateway.Immunization.Models.PHSA.Recommendation;
    using HealthGateway.Immunization.Services;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.Logging;
    using Moq;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Xunit;

    public class ImmsService_Test
    {
        private readonly IConfiguration configuration;

        public ImmsService_Test()
        {
            this.configuration = GetIConfigurationRoot(string.Empty);
        }

        [Fact]
        public void ValidateImmunization()
        {
            var mockDelegate = new Mock<IImmunizationDelegate>();
            RequestResult<PHSAResult<ImmunizationResponse>> delegateResult = new RequestResult<PHSAResult<ImmunizationResponse>>()
            {
                ResultStatus = Common.Constants.ResultType.Success,
                ResourcePayload = new PHSAResult<ImmunizationResponse>()
                {
                    LoadState = new PHSALoadState() { RefreshInProgress = false, },
                    Result = new ImmunizationResponse()
                    {
                        ImmunizationViews = new List<ImmunizationViewResponse>() {
                        new ImmunizationViewResponse(){
                            Id = Guid.NewGuid(),
                            Name = "MockImmunization",
                            OccurrenceDateTime = DateTime.Now,
                            SourceSystemId = "MockSourceID"
                        }},
                    },
                },
                PageIndex = 0,
                PageSize = 5,
                TotalResultCount = 1,
            };
            RequestResult<ImmunizationResult> expectedResult = new RequestResult<ImmunizationResult>()
            {
                ResultStatus = delegateResult.ResultStatus,
                ResourcePayload = new ImmunizationResult()
                {
                    LoadState = LoadStateModel.FromPHSAModel(delegateResult.ResourcePayload.LoadState),
                    Immunizations = ImmunizationEvent.FromPHSAModelList(delegateResult.ResourcePayload.Result.ImmunizationViews),
                },
                PageIndex = delegateResult.PageIndex,
                PageSize = delegateResult.PageSize,
                TotalResultCount = delegateResult.TotalResultCount,
            };

            mockDelegate.Setup(s => s.GetImmunizations(It.IsAny<string>(), It.IsAny<int>())).Returns(Task.FromResult(delegateResult));
            IImmunizationService service = new ImmunizationService(new Mock<ILogger<ImmunizationService>>().Object, mockDelegate.Object);

            var actualResult = service.GetImmunizations(string.Empty, 0);
            Assert.True(expectedResult.IsDeepEqual(actualResult.Result));
        }

        [Fact]
        public void ValidateRecomendation()
        {

            string recomendationSetId = "set-recomendation-id";
            string diseaseEligibleDateString = "2021-02-02";
            string diseaseName = "Human papillomavirus infection";
            string vaccineName = "Human Papillomavirus-HPV9 Vaccine";
            string antigenName = "HPV-9";

            var mockDelegate = new Mock<IImmunizationDelegate>();
            RequestResult<PHSAResult<ImmunizationResponse>> delegateResult = new RequestResult<PHSAResult<ImmunizationResponse>>()
            {
                ResultStatus = Common.Constants.ResultType.Success,
                ResourcePayload = new PHSAResult<ImmunizationResponse>()
                {
                    LoadState = new PHSALoadState() { RefreshInProgress = false, },
                    Result = new ImmunizationResponse()
                    {
                        Recommendations = new List<ImmunizationRecommendationResponse>() {
                            new ImmunizationRecommendationResponse() {
                                    ForecastCreationDate = DateTime.Now,
                                    RecommendationId = recomendationSetId,
                                    RecommendationSourceSystem = "MockSourceSystem",
                                    RecommendationSourceSystemId = "MockSourceID",
                                    Recommendations = new List<RecommendationResponse>() {
                                        new RecommendationResponse() {
                                            DateCriterions = new List<DateCriterion>() {
                                                new DateCriterion() {
                                                    DateCriterionCode = new DateCriterionCode() {
                                                        text = "Forecast by Disease Eligible Date"
                                                    },
                                                    Value = diseaseEligibleDateString
                                                }
                                            },
                                            ForecastStatus = new ForecastStatusModel() { ForecastStatusText = "Eligible" },
                                            TargetDisease = new TargetDiseaseResponse() {
                                                targetDiseaseCodes = new List<SystemCode>() {
                                                    new SystemCode() {
                                                        Code = "240532009",
                                                        CommonType = "DiseaseCode",
                                                        Display = diseaseName,
                                                        System = "https://ehealthbc.ca/NamingSystem/ca-bc-panorama-immunization-disease-code"
                                                    }
                                                }
                                            },
                                            VaccineCode = new VaccineCode(){
                                                VaccineCodeText = vaccineName,
                                                VaccineCodes = new List<SystemCode>() {
                                                    new SystemCode() {
                                                        Code = "BCYSCT_AN032",
                                                        CommonType = "AntiGenCode",
                                                        Display = antigenName,
                                                        System = "https://ehealthbc.ca/NamingSystem/ca-bc-panorama-immunization-antigen-code"
                                                    }
                                                }
                                            },
                                        }
                                    },
                            }
                        },
                    },
                },
                PageIndex = 0,
                PageSize = 5,
                TotalResultCount = 1,
            };
            RequestResult<ImmunizationResult> expectedResult = new RequestResult<ImmunizationResult>()
            {
                ResultStatus = delegateResult.ResultStatus,
                ResourcePayload = new ImmunizationResult()
                {
                    LoadState = LoadStateModel.FromPHSAModel(delegateResult.ResourcePayload.LoadState),
                    Recommendations = ImmunizationRecommendation.FromPHSAModelList(delegateResult.ResourcePayload.Result.Recommendations),
                },
                PageIndex = delegateResult.PageIndex,
                PageSize = delegateResult.PageSize,
                TotalResultCount = delegateResult.TotalResultCount,
            };

            mockDelegate.Setup(s => s.GetImmunizations(It.IsAny<string>(), It.IsAny<int>())).Returns(Task.FromResult(delegateResult));
            IImmunizationService service = new ImmunizationService(new Mock<ILogger<ImmunizationService>>().Object, mockDelegate.Object);

            var actualResult = service.GetImmunizations(string.Empty, 0);
            Assert.True(expectedResult.IsDeepEqual(actualResult.Result));
            Assert.Equal(1, expectedResult.ResourcePayload.Recommendations.Count);
            var recomendationResult = expectedResult.ResourcePayload.Recommendations[0];
            Assert.Equal(recomendationSetId, recomendationResult.RecommendationSetId);
            Assert.Equal(vaccineName, recomendationResult.Immunization.Name);
            Assert.Equal(1, recomendationResult.Immunization.ImmunizationAgents.Count());
            Assert.Equal(antigenName, recomendationResult.Immunization.ImmunizationAgents.First().Name);
            Assert.Equal(1, recomendationResult.TargetDiseases.Count());
            Assert.Equal(diseaseName, recomendationResult.TargetDiseases.First().Name);
            Assert.Equal(DateTime.Parse(diseaseEligibleDateString), recomendationResult.DisseaseEligibleDate);
            Assert.Null(recomendationResult.DiseaseDueDate);
            Assert.Null(recomendationResult.AgentDueDate);
            Assert.Null(recomendationResult.AgentEligibleDate);
        }

        [Fact]
        public void ValidateImmunizationError()
        {

            var mockDelegate = new Mock<IImmunizationDelegate>();
            RequestResult<PHSAResult<ImmunizationResponse>> delegateResult = new RequestResult<PHSAResult<ImmunizationResponse>>()
            {
                ResultStatus = Common.Constants.ResultType.Error,
                ResultError = new RequestResultError()
                {
                    ResultMessage = "Mock Error",
                    ErrorCode = "MOCK_BAD_ERROR",
                },
            };
            RequestResult<IEnumerable<ImmunizationEvent>> expectedResult = new RequestResult<IEnumerable<ImmunizationEvent>>()
            {
                ResultStatus = delegateResult.ResultStatus,
                ResultError = delegateResult.ResultError,
            };

            mockDelegate.Setup(s => s.GetImmunizations(It.IsAny<string>(), It.IsAny<int>())).Returns(Task.FromResult(delegateResult));
            IImmunizationService service = new ImmunizationService(new Mock<ILogger<ImmunizationService>>().Object, mockDelegate.Object);

            var actualResult = service.GetImmunizations(string.Empty, 0);
            Assert.True(expectedResult.IsDeepEqual(actualResult.Result));
        }

        private static IConfigurationRoot GetIConfigurationRoot(string outputPath)
        {
            return new ConfigurationBuilder()
                // .SetBasePath(outputPath)
                .AddJsonFile("appsettings.json", optional: true)
                .AddJsonFile("appsettings.Development.json", optional: true)
                .AddJsonFile("appsettings.local.json", optional: true)
                .Build();
        }
    }
}
