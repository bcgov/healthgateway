// -------------------------------------------------------------------------
//  Copyright Â© 2019 Province of British Columbia
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// -------------------------------------------------------------------------
namespace HealthGateway.LaboratoryTests
{
    using System.Collections.Generic;
    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.Configuration;
    using Moq;
    using Xunit;
    using HealthGateway.Common.Services;
    using System.Net.Http;
    using HealthGateway.Laboratory.Delegates;
    using HealthGateway.Laboratory.Models;
    using HealthGateway.Common.Models;
    using System.Threading.Tasks;
    using Moq.Protected;
    using System.Threading;
    using System.Net;
    using System.Linq;
    using System;

    public class LaboratoryDelegate_Test
    {

        private readonly IConfiguration configuration;

        public LaboratoryDelegate_Test()
        {
            this.configuration = GetIConfigurationRoot(string.Empty);
        }

        [Fact]
        public void ValidateGetLabOrders200()
        {

            var handlerMock = new Mock<HttpMessageHandler>();
            handlerMock
               .Protected()
               .Setup<Task<HttpResponseMessage>>(
                  "SendAsync",
                  ItExpr.IsAny<HttpRequestMessage>(),
                  ItExpr.IsAny<CancellationToken>()
               )
               .ReturnsAsync(new HttpResponseMessage()
               {
                   StatusCode = HttpStatusCode.OK,
                   Content = new StringContent(@"{""result"": [{""id"":""612d31e5-12e1-451f-a475-58d6b0a8f007"",""phn"":""9735352542"",""orderingProviderIds"":null,""orderingProviders"":""Davidson, Jana-Lea"",""reportingLab"":"""",""location"":""VCHA"",""ormOrOru"":""ORU"",""messageDateTime"":""2020-03-18T12:17:19"",""messageId"":""20200770000196"",""additionalData"":"""",""labResults"":[{""id"":""2a16cf0d-7798-4911-a533-43692e3080dc"",""testType"":""COVID19"",""outOfRange"":false,""collectedDateTime"":""2020-03-17T12:00:00"",""testStatus"":""Final"",""resultDescription"":""Nasopharyngeal Swab<br>HEALTH CARE WORKER<br>Negative.<br>No COVID-19 virus (2019-nCoV) detected by NAT.<br><br>This test targets the RdRP and E gene regions of COVID-19 virus (2019-nCoV) and has not been fully validated."",""receivedDateTime"":""2020-03-17T12:09:00"",""resultDateTime"":""2020-03-17T12:17:00"",""loinc"":""XXX-3286"",""loincName"":""COVID-19 n-Coronavirus  NAT""}]}]}"),
               })
               .Verifiable();
            using var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole());
            Mock<IHttpClientService> mockHttpClientService = new Mock<IHttpClientService>();
            mockHttpClientService.Setup(s => s.CreateDefaultHttpClient()).Returns(() => new HttpClient(handlerMock.Object));
            ILaboratoryDelegate labDelegate = new RestLaboratoryDelegate(loggerFactory.CreateLogger<RestLaboratoryDelegate>(), mockHttpClientService.Object, this.configuration);
            RequestResult<IEnumerable<LaboratoryOrder>> actualResult = Task.Run(async () => await labDelegate.GetLaboratoryOrders(string.Empty)).Result;
            Assert.Equal(Common.Constants.ResultType.Success, actualResult.ResultStatus);
            Assert.Equal("9735352542", actualResult.ResourcePayload.First<LaboratoryOrder>().PHN);
        }

        [Fact]
        public void ValidateGetLabOrders204()
        {

            var handlerMock = new Mock<HttpMessageHandler>();
            handlerMock
               .Protected()
               .Setup<Task<HttpResponseMessage>>(
                  "SendAsync",
                  ItExpr.IsAny<HttpRequestMessage>(),
                  ItExpr.IsAny<CancellationToken>()
               )
               .ReturnsAsync(new HttpResponseMessage()
               {
                   StatusCode = HttpStatusCode.NoContent,
                   Content = new StringContent(string.Empty),
               })
               .Verifiable();
            using var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole());
            Mock<IHttpClientService> mockHttpClientService = new Mock<IHttpClientService>();
            mockHttpClientService.Setup(s => s.CreateDefaultHttpClient()).Returns(() => new HttpClient(handlerMock.Object));
            ILaboratoryDelegate labDelegate = new RestLaboratoryDelegate(loggerFactory.CreateLogger<RestLaboratoryDelegate>(), mockHttpClientService.Object, this.configuration);
            RequestResult<IEnumerable<LaboratoryOrder>> actualResult = Task.Run(async () => await labDelegate.GetLaboratoryOrders(string.Empty)).Result;
            Assert.Equal(Common.Constants.ResultType.Success, actualResult.ResultStatus);
            Assert.Empty(actualResult.ResourcePayload);
        }

        [Fact]
        public void ValidateGetLabOrders403()
        {

            var handlerMock = new Mock<HttpMessageHandler>();
            handlerMock
               .Protected()
               .Setup<Task<HttpResponseMessage>>(
                  "SendAsync",
                  ItExpr.IsAny<HttpRequestMessage>(),
                  ItExpr.IsAny<CancellationToken>()
               )
               .ReturnsAsync(new HttpResponseMessage()
               {
                   StatusCode = HttpStatusCode.Forbidden,
                   Content = new StringContent(string.Empty),
               })
               .Verifiable();
            using var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole());
            Mock<IHttpClientService> mockHttpClientService = new Mock<IHttpClientService>();
            mockHttpClientService.Setup(s => s.CreateDefaultHttpClient()).Returns(() => new HttpClient(handlerMock.Object));
            ILaboratoryDelegate labDelegate = new RestLaboratoryDelegate(loggerFactory.CreateLogger<RestLaboratoryDelegate>(), mockHttpClientService.Object, this.configuration);
            RequestResult<IEnumerable<LaboratoryOrder>> actualResult = Task.Run(async () => await labDelegate.GetLaboratoryOrders(string.Empty)).Result;
            Assert.Equal(Common.Constants.ResultType.Error, actualResult.ResultStatus);
        }

        [Fact]
        public void ValidateGetLabReport200()
        {
            string expectedPDF = "";
            var handlerMock = new Mock<HttpMessageHandler>();
            handlerMock
               .Protected()
               .Setup<Task<HttpResponseMessage>>(
                  "SendAsync",
                  ItExpr.IsAny<HttpRequestMessage>(),
                  ItExpr.IsAny<CancellationToken>()
               )
               .ReturnsAsync(new HttpResponseMessage()
               {
                   StatusCode = HttpStatusCode.OK,
                   Content = new StringContent(@$"{{""mediaType"":""application/pdf"",""data"":""{expectedPDF}"",""encoding"":""base64""}}"),
               })
               .Verifiable();
            using var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole());
            Mock<IHttpClientService> mockHttpClientService = new Mock<IHttpClientService>();
            mockHttpClientService.Setup(s => s.CreateDefaultHttpClient()).Returns(() => new HttpClient(handlerMock.Object));
            ILaboratoryDelegate labDelegate = new RestLaboratoryDelegate(loggerFactory.CreateLogger<RestLaboratoryDelegate>(), mockHttpClientService.Object, this.configuration);
            RequestResult<LaboratoryReport> actualResult = Task.Run(async () => await labDelegate.GetLabReport(Guid.NewGuid(), string.Empty)).Result;
            Assert.Equal(Common.Constants.ResultType.Success, actualResult.ResultStatus);
            Assert.Equal(expectedPDF, actualResult.ResourcePayload.Report);

        }

        [Fact]
        public void ValidateGetLabReport204()
        {

            var handlerMock = new Mock<HttpMessageHandler>();
            handlerMock
               .Protected()
               .Setup<Task<HttpResponseMessage>>(
                  "SendAsync",
                  ItExpr.IsAny<HttpRequestMessage>(),
                  ItExpr.IsAny<CancellationToken>()
               )
               .ReturnsAsync(new HttpResponseMessage()
               {
                   StatusCode = HttpStatusCode.NoContent,
                   Content = new StringContent(string.Empty),
               })
               .Verifiable();
            using var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole());
            Mock<IHttpClientService> mockHttpClientService = new Mock<IHttpClientService>();
            mockHttpClientService.Setup(s => s.CreateDefaultHttpClient()).Returns(() => new HttpClient(handlerMock.Object));
            ILaboratoryDelegate labDelegate = new RestLaboratoryDelegate(loggerFactory.CreateLogger<RestLaboratoryDelegate>(), mockHttpClientService.Object, this.configuration);
            RequestResult<LaboratoryReport> actualResult = Task.Run(async () => await labDelegate.GetLabReport(Guid.NewGuid(), string.Empty)).Result;
            Assert.Equal(Common.Constants.ResultType.Success, actualResult.ResultStatus);
        }

        [Fact]
        public void ValidateGetLabReport403()
        {

            var handlerMock = new Mock<HttpMessageHandler>();
            handlerMock
               .Protected()
               .Setup<Task<HttpResponseMessage>>(
                  "SendAsync",
                  ItExpr.IsAny<HttpRequestMessage>(),
                  ItExpr.IsAny<CancellationToken>()
               )
               .ReturnsAsync(new HttpResponseMessage()
               {
                   StatusCode = HttpStatusCode.Forbidden,
                   Content = new StringContent(string.Empty),
               })
               .Verifiable();
            using var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole());
            Mock<IHttpClientService> mockHttpClientService = new Mock<IHttpClientService>();
            mockHttpClientService.Setup(s => s.CreateDefaultHttpClient()).Returns(() => new HttpClient(handlerMock.Object));
            ILaboratoryDelegate labDelegate = new RestLaboratoryDelegate(loggerFactory.CreateLogger<RestLaboratoryDelegate>(), mockHttpClientService.Object, this.configuration);
            RequestResult<LaboratoryReport> actualResult = Task.Run(async () => await labDelegate.GetLabReport(Guid.NewGuid(), string.Empty)).Result;
            Assert.Equal(Common.Constants.ResultType.Error, actualResult.ResultStatus);
        }


        //[Fact]
        //public async void FunctionalGetLabOrders()
        //{
        //    //string token = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJVS1ByRFNpSGdXZHM1NXhLc1dVajF6RFZ2alpTdXVib2FNTjZkbUxUcDBNIn0.eyJqdGkiOiI5OTI3MTIzMC0xZTUyLTQxNzUtYTBiNy04NGM1NDEwMThjZWYiLCJleHAiOjE1ODk0MTQxMDcsIm5iZiI6MCwiaWF0IjoxNTg5NDEzODA3LCJpc3MiOiJodHRwczovL3Nzby1kZXYucGF0aGZpbmRlci5nb3YuYmMuY2EvYXV0aC9yZWFsbXMvZmYwOXFuM2YiLCJhdWQiOiJoZWFsdGhnYXRld2F5Iiwic3ViIjoiNWQxODg4ZTgtMzVhZS00M2E1LTk3MGItNzI1MjI2YzkyZTA3IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiaGVhbHRoZ2F0ZXdheSIsIm5vbmNlIjoiNTkxMjY2ZjQtNTQ1Zi00MGFhLThmZTMtMzY3MWY1ZTg0ZWUzIiwiYXV0aF90aW1lIjoxNTg5NDEzODA2LCJzZXNzaW9uX3N0YXRlIjoiNzJkZWIwOWItYWJiNS00OTE4LWE3YmYtMjQyNDZjZjk2NWFiIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2Rldi5oZWFsdGhnYXRld2F5Lmdvdi5iYy5jYSJdLCJzY29wZSI6Im9wZW5pZCBhdWRpZW5jZSBvZmZsaW5lX2FjY2VzcyBwcm9maWxlIiwiaGRpZCI6IlFZRkxWQ0s3R0pOTDJUMkRFMzNGREFYN1o1RTVRNzQyRTJIT1hCNE9BSFozMldJNllYUEEifQ.V4zrrJe0YbmqcfwvjREkpsq6obXVH2jOzepFl5HeOQCG5P3E5VPp8KwnySWEZR817DE1fB_TvnliAAxV_EZ2JPFZ6O-k8QwK5M1vw2xRx7hOcDv1qundko8PB2a6q0ONfEFKduKw75aMYMvZSU0cjQJ3tv5ltz1rn0e_I1AxrlLR4fdHr_ZVD5gR0Sj6IA8ERf2NPFepUxYDmNk1hWlO6fsOM5JwQZcKxkA3U9dH20z7Eaprf8HH_9l3QO_HUS_KxwjIP5rv_PM0OmW0-amO7NA9y_4WNIEoLo4ZOkC_Zh6aS2T8PcM7J-DE3mmGMFYWUJEyQy1j8HbMg8XoJQ12M";
        //    string token = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJVS1ByRFNpSGdXZHM1NXhLc1dVajF6RFZ2alpTdXVib2FNTjZkbUxUcDBNIn0.eyJqdGkiOiIwNDRjYjE4MS1iYjU1LTQzNWUtOThmNC00YTAzYzEwYTVmMmYiLCJleHAiOjE1ODkzMDIxODEsIm5iZiI6MCwiaWF0IjoxNTg5MzAxODgxLCJpc3MiOiJodHRwczovL3Nzby1kZXYucGF0aGZpbmRlci5nb3YuYmMuY2EvYXV0aC9yZWFsbXMvZmYwOXFuM2YiLCJhdWQiOiJoZWFsdGhnYXRld2F5Iiwic3ViIjoiNWQxODg4ZTgtMzVhZS00M2E1LTk3MGItNzI1MjI2YzkyZTA3IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiaGVhbHRoZ2F0ZXdheSIsIm5vbmNlIjoiYjFhMDM0ZjktMjQ2Yi00ZjA0LWFjYjAtNDlmZTVjMGRjNjE1IiwiYXV0aF90aW1lIjoxNTg5MzAxODgwLCJzZXNzaW9uX3N0YXRlIjoiNGY5MThmNjgtNGFkOC00YjQyLTgzYzEtNTYyNDFjMjU3NjYzIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2Rldi5oZWFsdGhnYXRld2F5Lmdvdi5iYy5jYSJdLCJzY29wZSI6Im9wZW5pZCBwYXRpZW50L1BhdGllbnQucmVhZCBhdWRpZW5jZSBvZmZsaW5lX2FjY2VzcyBwYXRpZW50L09ic2VydmF0aW9uLnJlYWQgcGF0aWVudC9NZWRpY2F0aW9uRGlzcGVuc2UucmVhZCIsImhkaWQiOiJRWUZMVkNLN0dKTkwyVDJERTMzRkRBWDdaNUU1UTc0MkUySE9YQjRPQUhaMzJXSTZZWFBBIn0.DN2FS_LnUmUFvnN56_Igcwqkl6Lf9eezXDo96wt1yW1CCfowBRijemBhH0SYWJAzFROPtqRq1UsHPAumfAwB7pPedqnOzhGqY2QXEmk7rGdA0UNvkoGsvTGC7n9R3Z4wW1zUeHLHG9l-QvNIkiTsU1KFBViCKCRCas4B2OY0Io0lz_uj6gMtrC4WedaMR5HJq2r5oai6y1DssKsp6YmYG29wOn8lp3szNOOn2zk-Fkt8AdiaAwziGCUCaip8g6tmaqBCI71qOFpu5xluSU4PA9CMNv8M6n-Ul55NcoV1yXPqi3vPNNg4MHhvyMOSKcvG7MR5sAnTQA2l9eANoxaTiA";
        //    // string token = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJVS1ByRFNpSGdXZHM1NXhLc1dVajF6RFZ2alpTdXVib2FNTjZkbUxUcDBNIn0.eyJqdGkiOiI5Mjk1NzNiNS03MDE2LTQyZWEtOTY4Zi00MjJkY2EwZGM1ODQiLCJleHAiOjE1ODg4MDI0MjEsIm5iZiI6MCwiaWF0IjoxNTg4ODAyMTIxLCJpc3MiOiJodHRwczovL3Nzby1kZXYucGF0aGZpbmRlci5nb3YuYmMuY2EvYXV0aC9yZWFsbXMvZmYwOXFuM2YiLCJhdWQiOlsicGhzYS1jZGMtbG9jYWwiLCJhY2NvdW50Il0sInN1YiI6IjVkMTg4OGU4LTM1YWUtNDNhNS05NzBiLTcyNTIyNmM5MmUwNyIsInR5cCI6IkJlYXJlciIsImF6cCI6InBoc2EtY2RjLWxvY2FsIiwibm9uY2UiOiI2MzcyNDM5ODg4NzIyNzYzNzMuTXpnd1pHWm1NMk10WldOa1ppMDBPRGhtTFRoak5tWXRZbVJrWVRWalltUmpZMlV6TURWbU9HVTNPRGd0TURoaFppMDBPV0ppTFRnd1pXSXRZVEV6WWpsbVlUWXlNV0k1IiwiYXV0aF90aW1lIjoxNTg4ODAyMTIxLCJzZXNzaW9uX3N0YXRlIjoiZmJmYWQzYzMtYjM4OS00MGU0LWJmOWYtNmUxOGVhNzYxNTE0IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2xvY2FsaG9zdDo0NDM5NyJdLCJzY29wZSI6Im9wZW5pZCBwYXRpZW50L1BhdGllbnQucmVhZCBwcm9maWxlIHBhdGllbnQvT2JzZXJ2YXRpb24ucmVhZCBlbWFpbCIsImhkaWQiOiJRWUZMVkNLN0dKTkwyVDJERTMzRkRBWDdaNUU1UTc0MkUySE9YQjRPQUhaMzJXSTZZWFBBIn0.WVvFC94LqpEUj1HdJyV-yENa_VosWFJFGUVjsfW1jI6NIQ4BzpcpBBOVUfIqJBXMUY022ghHOrVK1rCBguhamVbpI-TfFjoufikjHBn3Ivp-OKN8Qhp96Qi_EcNwULaf50srrTlHGTXHrFuZGb_8gw9D7gExpQ5qNMdHMsz5noKMHDYdXVvnT2pM8cysqStNc3LQuol8U5P3KC7GsCINsl7ZJkMqJoi_WtBkK2O3-lxEyGiVoLnrVo3Yt6epn6P2rH_GOQa2m_OlRNmwF0DMKf8LPDDEGfSgVkXXEdqJge-n7doqr1-6QSNj15vcQFLQJ8MafzSdD9wNi16joXnaeg";
        //    using var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole());
        //    Mock<IHttpClientService> mockHttpClientService = new Mock<IHttpClientService>();
        //    mockHttpClientService.Setup(s => s.CreateDefaultHttpClient()).Returns(() => new HttpClient());
        //    ILaboratoryDelegate labDelegate = new RestLaboratoryDelegate(loggerFactory.CreateLogger<RestLaboratoryDelegate>(), mockHttpClientService.Object, this.configuration);

        //    RequestResult<IEnumerable<LaboratoryOrder>> actualResult = await labDelegate.GetLaboratoryOrders(token).ConfigureAwait(true);
        //    Assert.True(actualResult.ResultStatus == Common.Constants.ResultType.Success);
        //}

        //[Fact]
        //public async void FunctinalGetLabReport()
        //{
        //    string token = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJVS1ByRFNpSGdXZHM1NXhLc1dVajF6RFZ2alpTdXVib2FNTjZkbUxUcDBNIn0.eyJqdGkiOiIwNDRjYjE4MS1iYjU1LTQzNWUtOThmNC00YTAzYzEwYTVmMmYiLCJleHAiOjE1ODkzMDIxODEsIm5iZiI6MCwiaWF0IjoxNTg5MzAxODgxLCJpc3MiOiJodHRwczovL3Nzby1kZXYucGF0aGZpbmRlci5nb3YuYmMuY2EvYXV0aC9yZWFsbXMvZmYwOXFuM2YiLCJhdWQiOiJoZWFsdGhnYXRld2F5Iiwic3ViIjoiNWQxODg4ZTgtMzVhZS00M2E1LTk3MGItNzI1MjI2YzkyZTA3IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiaGVhbHRoZ2F0ZXdheSIsIm5vbmNlIjoiYjFhMDM0ZjktMjQ2Yi00ZjA0LWFjYjAtNDlmZTVjMGRjNjE1IiwiYXV0aF90aW1lIjoxNTg5MzAxODgwLCJzZXNzaW9uX3N0YXRlIjoiNGY5MThmNjgtNGFkOC00YjQyLTgzYzEtNTYyNDFjMjU3NjYzIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwczovL2Rldi5oZWFsdGhnYXRld2F5Lmdvdi5iYy5jYSJdLCJzY29wZSI6Im9wZW5pZCBwYXRpZW50L1BhdGllbnQucmVhZCBhdWRpZW5jZSBvZmZsaW5lX2FjY2VzcyBwYXRpZW50L09ic2VydmF0aW9uLnJlYWQgcGF0aWVudC9NZWRpY2F0aW9uRGlzcGVuc2UucmVhZCIsImhkaWQiOiJRWUZMVkNLN0dKTkwyVDJERTMzRkRBWDdaNUU1UTc0MkUySE9YQjRPQUhaMzJXSTZZWFBBIn0.DN2FS_LnUmUFvnN56_Igcwqkl6Lf9eezXDo96wt1yW1CCfowBRijemBhH0SYWJAzFROPtqRq1UsHPAumfAwB7pPedqnOzhGqY2QXEmk7rGdA0UNvkoGsvTGC7n9R3Z4wW1zUeHLHG9l-QvNIkiTsU1KFBViCKCRCas4B2OY0Io0lz_uj6gMtrC4WedaMR5HJq2r5oai6y1DssKsp6YmYG29wOn8lp3szNOOn2zk-Fkt8AdiaAwziGCUCaip8g6tmaqBCI71qOFpu5xluSU4PA9CMNv8M6n-Ul55NcoV1yXPqi3vPNNg4MHhvyMOSKcvG7MR5sAnTQA2l9eANoxaTiA";
        //    Guid id = Guid.Parse("dfb15dc0-1733-4426-bfaf-c700ab20dbe1");
        //    using var loggerFactory = LoggerFactory.Create(builder => builder.AddConsole());
        //    Mock<IHttpClientService> mockHttpClientService = new Mock<IHttpClientService>();
        //    mockHttpClientService.Setup(s => s.CreateDefaultHttpClient()).Returns(() => new HttpClient());
        //    ILaboratoryDelegate labDelegate = new RestLaboratoryDelegate(loggerFactory.CreateLogger<RestLaboratoryDelegate>(), mockHttpClientService.Object, this.configuration);

        //    RequestResult<LaboratoryReport> actualResult = await labDelegate.GetLabReport(id, token).ConfigureAwait(true);
        //    Assert.True(actualResult.ResultStatus == Common.Constants.ResultType.Success);
        //}

        private static IConfigurationRoot GetIConfigurationRoot(string outputPath)
        {
            return new ConfigurationBuilder()
                // .SetBasePath(outputPath)
                .AddJsonFile("appsettings.json", optional: true)
                .AddJsonFile("appsettings.Development.json", optional: true)
                .AddJsonFile("appsettings.local.json", optional: true)
                .Build();
        }
    }
}
