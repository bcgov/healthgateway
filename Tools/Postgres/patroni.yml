apiVersion: v1
kind: Template
metadata:
  name: postgres-template
objects:

- apiVersion: v1
  kind: ServiceAccount
  imagePullSecrets:
    - name: patroni-persistent-dockercfg-m7d88
  secrets:
    - name: patroni-persistent-token-4nfzq
    - name: patroni-persistent-dockercfg-m7d88
  metadata:
    labels:
      app: ${NAME}
    name: patroni-persistent

- apiVersion: v1
  kind: Service
  spec:
    ports:
      - port: 5432
        protocol: TCP
        targetPort: 5432
    sessionAffinity: None
    type: ClusterIP
  metadata:
    labels:
      app: ${NAME}
      cluster-name: ${NAME}
    name: ${NAME}

- apiVersion: v1
  kind: Service
  spec:
    ports:
      - port: 5432
        protocol: TCP
        targetPort: 5432
    selector:
      app: ${NAME}
      cluster-name: ${NAME}
      role: master
    sessionAffinity: None
    type: ClusterIP
  metadata:
    labels:
      app: ${NAME}
      cluster-name: ${NAME}
    name: ${NAME}-master

- apiVersion: v1
  kind: Service
  spec:
    ports:
      - port: 5432
        protocol: TCP
        targetPort: 5432
    selector:
      app: ${NAME}
      cluster-name: ${NAME}
      role: replica
    sessionAffinity: None
    type: ClusterIP
  metadata:
    labels:
      app: ${NAME}
      cluster-name: ${NAME}
      template.openshift.io/template-instance-owner: e2609ac8-f047-11e9-af44-005056832285
    name: ${NAME}-replica

- apiVersion: apps/v1
  kind: StatefulSet
  spec:
    podManagementPolicy: OrderedReady
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ${NAME}
        cluster-name: ${NAME}
    serviceName: ${NAME}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${NAME}
          cluster-name: ${NAME}
      spec:
        containers:
          - env:
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: status.podIP
              - name: PATRONI_KUBERNETES_NAMESPACE
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
              - name: PATRONI_KUBERNETES_LABELS
                value: '{app: ${NAME}, cluster-name: ${NAME}}'
              - name: PATRONI_SUPERUSER_USERNAME
                value: postgres
              - name: PATRONI_SUPERUSER_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: superuser-password
                    name: ${NAME}
              - name: PATRONI_REPLICATION_USERNAME
                value: postgres
              - name: PATRONI_REPLICATION_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: replication-password
                    name: ${NAME}
              - name: PATRONI_SCOPE
                value: postgres
              - name: PATRONI_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.name
              - name: PATRONI_POSTGRESQL_DATA_DIR
                value: /home/postgres/pgdata/pgroot/data
              - name: PATRONI_POSTGRESQL_PGPASS
                value: /tmp/pgpass
              - name: PATRONI_POSTGRESQL_LISTEN
                value: '0.0.0.0:5432'
              - name: PATRONI_RESTAPI_LISTEN
                value: '0.0.0.0:8008'
            image: 'docker-registry.default.svc:5000/openshift/patroni:10'
            imagePullPolicy: IfNotPresent
            name: ${NAME}
            ports:
              - containerPort: 8008
                protocol: TCP
              - containerPort: 5432
                protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - mountPath: /home/postgres/pgdata
                name: ${NAME}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: patroni-persistent
        serviceAccountName: patroni-persistent
        terminationGracePeriodSeconds: 0
        volumes:
          - name: ${NAME}
            persistentVolumeClaim:
              claimName: ${NAME}
    updateStrategy:
      type: OnDelete
    volumeClaimTemplates:
      - metadata:
          creationTimestamp: null
          labels:
            app: ${NAME}
          name: ${NAME}
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
        status:
          phase: Pending
  metadata:
    generation: 1
    labels:
      app: ${NAME}
      cluster-name: ${NAME}
    name: ${NAME}

- apiVersion: v1
  kind: Secret
  metadata: 
    name: ${NAME}
    labels: 
      app: ${NAME}
  stringData: 
    superuser-password: ${POSTGRESQL_SUPERUSER_PASSWORD}
    replication-password: ${POSTGRESQL_REPLICATION_PASSWORD}
parameters: 
  - name: NAME
    displayName: Template Name
    description: The name of the template and all related entities (override for multiple deployments in the same namespace)
    required: true
    value: postgres
  - name: POSTGRESQL_SUPERUSER_PASSWORD
    displayName: Postgres Superuser Password
    description: The password of the postgres supersuser
    required: true
    value: postgres
  - name: POSTGRESQL_REPLICATION_PASSWORD
    displayName: Postgres Replication Password
    description: The password of the postgres replication user
    required: true
    value: postgres
